[{"/Users/anelamra/Desktop/merged/client/src/index.js":"1","/Users/anelamra/Desktop/merged/client/src/App.js":"2","/Users/anelamra/Desktop/merged/client/src/start/theme.js":"3","/Users/anelamra/Desktop/merged/client/src/history/history.js":"4","/Users/anelamra/Desktop/merged/client/src/start/init.js":"5","/Users/anelamra/Desktop/merged/client/src/start/SocketContext.js":"6","/Users/anelamra/Desktop/merged/client/src/component/auth/Sign-in.js":"7","/Users/anelamra/Desktop/merged/client/src/component/auth/Login.js":"8","/Users/anelamra/Desktop/merged/client/src/component/auth/Valid.js":"9","/Users/anelamra/Desktop/merged/client/src/component/forget/sendForget.js":"10","/Users/anelamra/Desktop/merged/client/src/component/forget/forget.js":"11","/Users/anelamra/Desktop/merged/client/src/component/layout/res/ResponsiveDrawer.js":"12","/Users/anelamra/Desktop/merged/client/src/start/IntraSvg.js":"13","/Users/anelamra/Desktop/merged/client/src/start/IdContext.js":"14","/Users/anelamra/Desktop/merged/client/src/component/helpers/size.js":"15","/Users/anelamra/Desktop/merged/client/src/component/chat/Chat.js":"16","/Users/anelamra/Desktop/merged/client/src/component/profil/Home.js":"17","/Users/anelamra/Desktop/merged/client/src/component/profil/setting.js":"18","/Users/anelamra/Desktop/merged/client/src/component/profil/editProfill.js":"19","/Users/anelamra/Desktop/merged/client/src/component/browsing/browsing.js":"20","/Users/anelamra/Desktop/merged/client/src/component/history/history.js":"21","/Users/anelamra/Desktop/merged/client/src/component/Notifications/Notifications.js":"22","/Users/anelamra/Desktop/merged/client/src/component/Notifications/MessageNotification.js":"23","/Users/anelamra/Desktop/merged/client/src/component/allProfil/likeProfil.js":"24","/Users/anelamra/Desktop/merged/client/src/component/chat/ChatBox.js":"25","/Users/anelamra/Desktop/merged/client/src/component/chat/LeftSection.js":"26","/Users/anelamra/Desktop/merged/client/src/component/profil/fillProfil.js":"27","/Users/anelamra/Desktop/merged/client/src/component/profil/myAddImages.js":"28","/Users/anelamra/Desktop/merged/client/src/component/browsing/report.js":"29","/Users/anelamra/Desktop/merged/client/src/component/browsing/search.js":"30","/Users/anelamra/Desktop/merged/client/src/component/browsing/profil.js":"31","/Users/anelamra/Desktop/merged/client/src/component/browsing/map.js":"32","/Users/anelamra/Desktop/merged/client/src/component/browsing/sort.js":"33","/Users/anelamra/Desktop/merged/client/src/component/browsing/filter.js":"34","/Users/anelamra/Desktop/merged/client/src/component/profil/profil.js":"35","/Users/anelamra/Desktop/merged/client/src/component/forget/editPassword.js":"36","/Users/anelamra/Desktop/merged/client/src/component/profil/geo.js":"37"},{"size":663,"mtime":1616145562000,"results":"38","hashOfConfig":"39"},{"size":247,"mtime":1616145562000,"results":"40","hashOfConfig":"39"},{"size":141,"mtime":1616145562000,"results":"41","hashOfConfig":"39"},{"size":87,"mtime":1616145562000,"results":"42","hashOfConfig":"39"},{"size":2665,"mtime":1616145830000,"results":"43","hashOfConfig":"39"},{"size":103,"mtime":1616145562000,"results":"44","hashOfConfig":"39"},{"size":11661,"mtime":1616145562000,"results":"45","hashOfConfig":"39"},{"size":11042,"mtime":1616145562000,"results":"46","hashOfConfig":"39"},{"size":954,"mtime":1616145562000,"results":"47","hashOfConfig":"39"},{"size":3225,"mtime":1616145562000,"results":"48","hashOfConfig":"39"},{"size":3362,"mtime":1616145562000,"results":"49","hashOfConfig":"39"},{"size":11309,"mtime":1616149900000,"results":"50","hashOfConfig":"39"},{"size":6687,"mtime":1616145562000,"results":"51","hashOfConfig":"39"},{"size":92,"mtime":1616145562000,"results":"52","hashOfConfig":"39"},{"size":399,"mtime":1616145562000,"results":"53","hashOfConfig":"39"},{"size":2853,"mtime":1616154061000,"results":"54","hashOfConfig":"39"},{"size":4637,"mtime":1616145562000,"results":"55","hashOfConfig":"39"},{"size":147,"mtime":1616145562000,"results":"56","hashOfConfig":"39"},{"size":2532,"mtime":1616145562000,"results":"57","hashOfConfig":"39"},{"size":9899,"mtime":1616145562000,"results":"58","hashOfConfig":"39"},{"size":1427,"mtime":1616145562000,"results":"59","hashOfConfig":"39"},{"size":7330,"mtime":1616153119000,"results":"60","hashOfConfig":"39"},{"size":6300,"mtime":1616145562000,"results":"61","hashOfConfig":"39"},{"size":18616,"mtime":1616153120000,"results":"62","hashOfConfig":"39"},{"size":7772,"mtime":1616145562000,"results":"63","hashOfConfig":"39"},{"size":4645,"mtime":1616154740000,"results":"64","hashOfConfig":"39"},{"size":10575,"mtime":1616145562000,"results":"65","hashOfConfig":"39"},{"size":12560,"mtime":1616145562000,"results":"66","hashOfConfig":"39"},{"size":2629,"mtime":1616145562000,"results":"67","hashOfConfig":"39"},{"size":5885,"mtime":1616145562000,"results":"68","hashOfConfig":"39"},{"size":14792,"mtime":1616145562000,"results":"69","hashOfConfig":"39"},{"size":4446,"mtime":1616145562000,"results":"70","hashOfConfig":"39"},{"size":1221,"mtime":1616145562000,"results":"71","hashOfConfig":"39"},{"size":2646,"mtime":1616145562000,"results":"72","hashOfConfig":"39"},{"size":13469,"mtime":1616145562000,"results":"73","hashOfConfig":"39"},{"size":5220,"mtime":1616145562000,"results":"74","hashOfConfig":"39"},{"size":4548,"mtime":1616145562000,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"wqp2bw",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"78"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"78"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"78"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"78"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"78"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"78"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"78"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"78"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"78"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"78"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"/Users/anelamra/Desktop/merged/client/src/index.js",[],["161","162"],"/Users/anelamra/Desktop/merged/client/src/App.js",[],"/Users/anelamra/Desktop/merged/client/src/start/theme.js",[],"/Users/anelamra/Desktop/merged/client/src/history/history.js",[],"/Users/anelamra/Desktop/merged/client/src/start/init.js",["163"],"import React, { useState, useEffect } from \"react\";\r\nimport { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport Axios from \"axios\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Login from \"../component/auth/Login\";\r\nimport Signup from \"../component/auth/Sign-in\";\r\nimport Valid from \"../component/auth/Valid\";\r\nimport SendForget from \"../component/forget/sendForget\";\r\nimport Forget from \"../component/forget/forget\";\r\nimport ResponsiveDrawer from \"../component/layout/res/ResponsiveDrawer\";\r\nimport SocketContext from \"./SocketContext\";\r\nimport { io } from \"socket.io-client\";\r\nimport history from \"../history/history\";\r\nconst URL = \"http://localhost:3001\";\r\n\r\nconst socket = io(URL);\r\n\r\nconst Init = (props) => {\r\n  const [loggedin, setLoggedin] = useState(false);\r\n  const [lay3awn, setLay3awn] = React.useState(false);\r\n\r\n  const login = () => {\r\n    setLoggedin(!loggedin);\r\n  };\r\n  const logout = () => {\r\n    setLoggedin(false);\r\n    setLay3awn(false);\r\n    history.push(\"/Sign-up\");\r\n    // history.push(\"/Login\");\r\n  };\r\n\r\n  const CancelToken = Axios.CancelToken;\r\n  const source = CancelToken.source();\r\n\r\n  const checkLogin = React.useCallback(async () => {\r\n    await Axios.get(\"http://localhost:3001/users/checkLogin\", {\r\n      withCredentials: true,\r\n      cancelToken: source.token,\r\n    })\r\n      .then((response) => {\r\n        if (response.data.access === \"Granted\" && response.data.jwt)\r\n          setLoggedin(true);\r\n        else setLoggedin(false);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }, [source]);\r\n\r\n  useEffect(() => {\r\n    checkLogin();\r\n    return () => {\r\n      if (source) source.cancel(\"init\");\r\n    };\r\n  }, [checkLogin, source]);\r\n  const theme = createMuiTheme({});\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* <ThemeProvider theme={theme}></ThemeProvider> */}\r\n      {loggedin === false ? (\r\n        <Switch>\r\n          <Route exact path=\"/Sign-up\" component={Signup} />\r\n          <Route path=\"/Login\" component={() => <Login login={login} />} />\r\n          <Route path=\"/confirm/:cnfId\" component={Valid} />\r\n          <Route path=\"/sendForget\" component={SendForget} />\r\n          <Route path=\"/forget/:frgId\" component={Forget} />\r\n          <Route path=\"/*\" component={() => <Login login={login} />} />\r\n        </Switch>\r\n      ) : (\r\n        <SocketContext.Provider value={socket}>\r\n          <ResponsiveDrawer\r\n            logout={logout}\r\n            loggedin={loggedin}\r\n            lay3awn={lay3awn}\r\n            setLay3awn={setLay3awn}\r\n          />\r\n        </SocketContext.Provider>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Init;\r\n","/Users/anelamra/Desktop/merged/client/src/start/SocketContext.js",[],"/Users/anelamra/Desktop/merged/client/src/component/auth/Sign-in.js",[],"/Users/anelamra/Desktop/merged/client/src/component/auth/Login.js",[],"/Users/anelamra/Desktop/merged/client/src/component/auth/Valid.js",[],"/Users/anelamra/Desktop/merged/client/src/component/forget/sendForget.js",[],"/Users/anelamra/Desktop/merged/client/src/component/forget/forget.js",[],"/Users/anelamra/Desktop/merged/client/src/component/layout/res/ResponsiveDrawer.js",["164","165","166"],"import React from \"react\"\nimport Axios from \"axios\"\nimport { withRouter, Switch, Route } from \"react-router-dom\"\nimport PropTypes from \"prop-types\"\nimport \"../../../start/styles.css\"\nimport {\n  Typography,\n  Toolbar,\n  AppBar,\n  CssBaseline,\n  Divider,\n  List,\n  IconButton,\n  Hidden,\n  Drawer,\n  ListItemText,\n  ListItemIcon,\n  ListItem,\n  // Badge\n} from \"@material-ui/core\"\nimport {\n  Menu as MenuIcon,\n  // LocationOn\n} from \"@material-ui/icons\"\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\"\nimport { FaHome, FaHistory, FaHotjar, FaRegSun,FaUsers } from \"react-icons/fa\"\nimport { RiLogoutCircleLine } from \"react-icons/ri\"\nimport { AiFillMessage } from 'react-icons/ai'\nimport Chat from '../../chat/Chat'\nimport Browsing from '../../browsing/browsing'\nimport Home from \"../../profil/Home\"\nimport EditProfil from \"../../profil/editProfill\"\nimport Setting from \"../../profil/setting\"\nimport History from \"../../history/history\"\nimport AllProfil from \"../../allProfil/likeProfil\"\nimport SocketContext from \"../../../start/SocketContext\";\nimport Notifications from \"../../Notifications/Notifications\";\nimport MessageNotification from \"../../Notifications/MessageNotification\";\nimport IdContext from \"../../../start/IdContext\"\n\nconst instance = Axios.create({ withCredentials: true });\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    display: \"flex\",\n  },\n  ty: {\n    flexGrow: 1,\n    fontFamily: \"Comfortaa\",\n  },\n  drawer: {\n    [theme.breakpoints.up(\"sm\")]: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n  },\n  appBar: {\n    [theme.breakpoints.up(\"sm\")]: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n    },\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"none\",\n    },\n  },\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nconst ResponsiveDrawer = (props) => {\n  const { history, window } = props\n  const classes = useStyles()\n  const theme = useTheme()\n  const [mobileOpen, setMobileOpen] = React.useState(false)\n  const [id, setId] = React.useState(0)\n  const [lat, setLat] = React.useState(false)\n  const [long, setLong] = React.useState(false)\n  const [requiredProfilInfo, setRPI] = React.useState('')\n  const [didMount, setDidMount] = React.useState(false)\n  const [err, setErr] = React.useState(false)\n  const socket = React.useContext(SocketContext);\n\n  const [userInf, setUserInf] = React.useState({});\n\n\n  React.useEffect(() => {\n    socket.emit('join', { key: userInf.id });\n  }, [userInf, id])\n\n  function isEmpty(obj) {\n    for (var prop in obj) {\n      if (obj.hasOwnProperty(prop)) {\n        return false;\n      }\n    }\n\n    return true\n  }\n\n  const saveMyInfos = (value) => {\n    if (isEmpty(userInf) === true)\n      setUserInf(value);\n  }\n  console.log('3333333', userInf)\n  React.useEffect(() => {\n    if (id) {\n\n      Axios.post('http://localhost:3001/chat/getConnectedUserInfos', { userId: id })\n        .then((res) => {\n          // if(!MyInfos)\n          if (res) {\n            saveMyInfos(res.data.myInfos);\n          }\n\n        }).catch((err) => { console.log(err) })\n    }\n  }, [id])\n////////////////////////////////////////////////////////////////////////////////////////////////\n  function success(pos) {\n    setErr(false)\n    setLat(pos.coords.latitude)\n    setLong(pos.coords.longitude)\n    if (id1) navigator.geolocation.clearWatch(id1)\n  }\n\n  const options = {\n    enableHighAccuracy: false,\n    timeout: 5000,\n    maximumAge: 0,\n  }\n\n  let id1 = navigator.geolocation.getCurrentPosition(success, () => {setErr(true)}, options)\n\n  const func = React.useCallback(async () => {\n    if (!didMount){\n      const CancelToken = Axios.CancelToken\n      const source = CancelToken.source()\n        let { data } = await instance.get('http://localhost:3001/base', {\n          cancelToken: source.token,\n        })\n        setId(data.user.id)\n      return () => {\n        if (source) source.cancel('test')\n      }\n    }\n  }, [didMount])\n\n  const func1 = React.useCallback(async () => {\n    console.log(id)\n    if (id !== 0) {\n      console.log(\"TEST\")\n      await instance.post('http://localhost:3001/user/userInfoVerification', { userId: id }).then((res) => {\n        console.log(res.data)\n        if (res.data.status === true) {\n            setRPI(true)\n          } else setRPI(false)\n        }).catch(err => {\n          console.log(err)\n        })\n        console.log(\"TEST222\")\n    }\n  },[id])\n\n  React.useEffect(() => {\n    func()\n    func1()\n    setDidMount(true)\n    return () => {\n      setDidMount(false)\n    }\n  }, [func, func1])\n\n  const getLocIp = React.useCallback(() => {\n    // get locallization with help of ip\n    Axios.post(`/base/checkLoc/${id}`).then(res => {\n      if (res.data.status && err){\n        Axios.get('https://api.ipify.org?format=json').then(async (res) => {\n          await Axios.get(`http://ip-api.com/json/${res.data.ip}`).then((res) => {\n            setLat(res.data.lat)\n            setLong(res.data.lon)\n          })\n          if (id) Axios.post(`base/localisation/${id}`, { lat: lat, long: long })\n        })\n      }\n    })\n  }, [id, lat, long, err])\n\n  React.useEffect(() => {\n    // tal l push\n    if (lat === false && long === false)\n      getLocIp()\n  }, [lat, long, getLocIp])\n\n  React.useEffect(() => {\n    Axios.post(`/base/checkLoc/${id}`).then(res => {\n      if (res.data.status){\n        if (lat !== false && long !== false && id)\n          Axios.post(`base/localisation/${id}`, { lat: lat, long: long })\n      }\n    })\n    \n    setDidMount(true)\n    return () => {\n      setDidMount(false)\n    }\n  }, [id, lat, long])\n\n  const handelLogout = () => {\n    instance.post('http://localhost:3001/logout')\n    if(id){\n      socket.emit('Firedisconnect', {id : id})\n    }\n    // socket.close();\n  }\n  socket.on('fire', (data) => {\n    console.log('****'+data.id ,id)\n    if(data.id == id)\n    {\n      props.logout()\n    }\n  })\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen)\n  }\n\n  const itemsListOne = [\n    {\n      id: 0,\n      text: 'Home',\n      icon: <FaHome />,\n      onClick: () => history.push('/'),\n      hidden: true,\n      disabled: requiredProfilInfo,\n    },\n    {\n      id: 1,\n      text: 'browsing',\n      icon: <FaHotjar />,\n      onClick: () => history.push(`/browsing/${id}`),\n      disabled: !requiredProfilInfo,\n    },\n    {\n      id: 3,\n      text: 'Setting',\n      icon: <FaRegSun />,\n      onClick: () => history.push(`/edit/${id}`),\n      disabled: !requiredProfilInfo,\n    },\n    {\n      id: 4,\n      text: 'History',\n      icon: <FaHistory />,\n      onClick: () => history.push(`/history/${id}`),\n      disabled: !requiredProfilInfo,\n    },\n    {\n      id: 5,\n      text: 'Profil',\n      icon: <FaUsers />,\n      onClick: () => history.push('/allProfil'),\n      disabled: !requiredProfilInfo,\n    },\n    {\n      id: 6,\n      text: 'Chat',\n      icon: <AiFillMessage />,\n      onClick: () => history.push('/chat'),\n      disabled: !requiredProfilInfo,\n    },\n  ]\n  const itemsListTwo = [\n    {\n      id: 100,\n      text: 'Logout',\n      icon: <RiLogoutCircleLine />,\n      onClick: () => {\n        handelLogout()\n      },\n    },\n  ]\n  const drawer = (\n    <div>\n      <div className={classes.toolbar} />\n      <Divider />\n      <List key={Math.random()}>\n        {itemsListOne.map((item, index) => {\n          const { id, text, icon, onClick, disabled, hidden } = item\n          if (!hidden) {\n            return (\n              <ListItem button key={id} disabled={disabled} onClick={onClick}>\n                <ListItemText key={id + Math.random()} primary={text} />\n                {icon && <ListItemIcon>{icon}</ListItemIcon>}\n              </ListItem>\n            )\n          }\n          return <React.Fragment key={Math.random()}></React.Fragment>\n        })}\n      </List>\n      <Divider />\n      <List key={Math.random()}>\n        {itemsListTwo.map((item, index) => {\n          const { id, text, icon, onClick } = item\n          return (\n            <ListItem button key={id} onClick={onClick}>\n              <ListItemText key={id + Math.random()} primary={text} />\n              {icon && <ListItemIcon>{icon}</ListItemIcon>}\n            </ListItem>\n          )\n        })}\n      </List>\n    </div>\n  )\n\n  const container =\n    window !== undefined ? () => window().document.body : undefined\n\n  if (!didMount) {\n    return null\n  }\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position='fixed' className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            color='secondary'\n            aria-label='open drawer'\n            edge='start'\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography className={classes.ty} variant='h6' noWrap>\n            Matcha\n          </Typography>\n          <MessageNotification myInfos={userInf} />\n          <Notifications myInfos={userInf} />\n        </Toolbar>\n      </AppBar>\n      <nav className={classes.drawer} aria-label='mailbox folders'>\n        <Hidden smUp implementation='css'>\n          <Drawer\n            container={container}\n            variant='temporary'\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            ModalProps={{\n              keepMounted: true,\n            }}\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n        <Hidden xsDown implementation='css'>\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            variant='permanent'\n            open\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <Switch>\n          <IdContext.Provider value={id}>\n            <Route\n              exact\n              path='/edit/:id'\n              render={(props) => <EditProfil id={id} />}\n            />\n            <Route exact path='/chat' render={(props) => <Chat id={id} />} />\n            <Route\n              exact\n              path='/browsing/:id'\n              render={(props) => <Browsing id={id} />}\n            />\n            <Route exact path='/history/:id' component={History} />\n            <Route\n              exact\n              path='/setting'\n              component={(props) => <Setting id={id} />}\n            />\n            <Route\n              exact\n              path='/allProfil'\n              component={(props) => <AllProfil id={id} />}\n            />\n            {requiredProfilInfo === true ? (\n              <Route exact path='/' render={(props) => <Browsing id={id}  myInfos={userInf} />} />\n            ) : (\n              <Route exact path='/*' render={(props) => <Home id={id} />} />\n            )}\n          </IdContext.Provider>\n        </Switch>\n      </main>\n    </div>\n  )\n};\n\nResponsiveDrawer.propTypes = {\n  window: PropTypes.func,\n};\n\nexport default withRouter(ResponsiveDrawer);\n","/Users/anelamra/Desktop/merged/client/src/start/IntraSvg.js",[],"/Users/anelamra/Desktop/merged/client/src/start/IdContext.js",[],"/Users/anelamra/Desktop/merged/client/src/component/helpers/size.js",[],"/Users/anelamra/Desktop/merged/client/src/component/chat/Chat.js",["167","168"],"import React from \"react\";\nimport Axios from \"axios\";\nimport ChatBox from \"./ChatBox\";\nimport { Grid, Badge} from '@material-ui/core';\nimport { withStyles } from '@material-ui/core';\nimport { StylesProvider } from \"@material-ui/core/styles\";\nimport FullWidthTabs from \"./LeftSection\";\nimport \"./LeftSectionStyle.css\";\n\n// we have to get id of connected user & email of user to cha with;\n// ids will make the room's name\n\nwithStyles((theme) => ({\n  badge: {\n    backgroundColor: '#44b700',\n    color: '#44b700',\n    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\n    '&::after': {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      borderRadius: '50%',\n      animation: '$ripple 1.2s infinite ease-in-out',\n      border: '1px solid currentColor',\n      content: '\"\"',\n    },\n  },\n  '@keyframes ripple': {\n    '0%': {\n      transform: 'scale(.8)',\n      opacity: 1,\n    },\n    '100%': {\n      transform: 'scale(2.4)',\n      opacity: 0,\n    },\n  },\n}))(Badge);\n\nconst ChatList = (props) => {\n\n  const [people, setPeople] = React.useState([]);\n  const [hisInfos, setHisInfos] = React.useState({});\n  const [myInfos, setMyInfos] = React.useState({});\n  const [stopLoop] = React.useState('');\n\n  function isEmpty(obj) {\n    for (var prop in obj) {\n      if (obj.hasOwnProperty(prop)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  const saveMyInfos = (value) => {\n    if (isEmpty !== false)\n      setMyInfos(value);\n  }\n  const passHisInfos = (x) => {\n    setHisInfos(x);\n  }\n\n  // getting people matched with (id, userName, profilPicture);\n\n  React.useEffect(() => {\n    Axios.post('http://localhost:3001/chat/getConnectedUserInfos', { userId: props.id })\n      .then((res) => {\n        // if(!MyInfos)\n        if (res) {\n          saveMyInfos(res.data.myInfos);\n        }\n\n      }).catch((err) => { console.log(err) })\n\n    Axios.post('http://localhost:3001/chat/people', { userId: props.id })\n      .then((res) => {\n        if (res.data.boards) {\n          var result = res.data.boards\n          console.log('boards', result);\n          console.log('...boards', ...result);\n          setPeople([...result]);\n\n        }\n      }).catch((err) => { console.log(err) })\n\n\n  }, [stopLoop])\n\n\n  return (\n    <StylesProvider injectFirst>\n      <div>\n        <Grid container spacing={1} style={{ background: '#EEEEEE', height: '70vh' }}>\n          <Grid item md={3}>\n            <FullWidthTabs people={people} passHisInfos={passHisInfos}/>\n          </Grid>\n          <Grid item md={9}>\n            <ChatBox\n              id={props.id}\n              myInfos={myInfos}\n              hisInfos={hisInfos} id={props.id}\n              people={people} setPeople={setPeople}\n            />\n          </Grid>\n        </Grid>\n      </div>\n    </StylesProvider>\n  )\n}\n\nexport default ChatList;","/Users/anelamra/Desktop/merged/client/src/component/profil/Home.js",[],"/Users/anelamra/Desktop/merged/client/src/component/profil/setting.js",[],"/Users/anelamra/Desktop/merged/client/src/component/profil/editProfill.js",[],"/Users/anelamra/Desktop/merged/client/src/component/browsing/browsing.js",["169","170"],"import React from 'react'\nimport Axios from 'axios'\n// import moment from 'moment'\nimport { makeStyles, withStyles } from '@material-ui/core/styles'\nimport Filter from './filter'\nimport SortComponent from './sort'\nimport clsx from 'clsx'\nimport Profil from './profil'\nimport Map from \"./map\"\nimport Search from './search'\nimport {\n  Card, CardHeader, CardContent, CardActions,Badge, Grid,\n  Collapse, Avatar, IconButton, Typography, Container\n} from '@material-ui/core'\nimport {Alert} from '@material-ui/lab';\nimport {\n  Favorite,\n  ThumbDown as ThumbDownIcon,\n  SkipNext as SkipNextIcon,\n} from '@material-ui/icons'\nimport SocketContext from \"../../start/SocketContext\";\nimport IdContext from \"../../start/IdContext\";\n\nconst StyledBadge = withStyles((theme) => ({\n  // badge: (props) => \n  //   props.status === \"true\"\n  //   ? {\n  //       backgroundColor: '#A9A9A9',\n  //       boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\n  //       '&::after': {\n  //         border: '1px',\n  //       },\n  //     }\n  //   : {\n  //       backgroundColor: '#44b700',\n  //       color: '#44b700',\n  //       boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\n  //     },\n}))(Badge)\n\nconst useStyles = makeStyles((theme) => ({\n  diva: {\n    // background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    height: '100vh',\n  },\n  container: {\n    fontFamily: 'Comfortaa',\n\n  },\n  copy: {\n    // [theme.breakpoints.up(\"lg\")]: {\n    //   marginLeft: theme.spacing(70),\n    // },\n    textAlign: 'center',\n  },\n  root: {\n    // height: '35vh',\n    // width: '50vh',\n    backgroundColor: '#FFFAFA',\n    color: '#778899',\n    boxShadow: `10px 10px 10px #A9A9A9`,\n    maxWidth: 395,\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%', // 16:9\n  },\n  media1: {\n    width: '2vw',\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  date: {\n    paddingRight: '13vw'\n  },\n}))\n\nconst Browsing = (props) => {\n  const [cord, setCord] = React.useState([])\n  const [gender, setGender] = React.useState('')\n  const classes = useStyles()\n  const [list, setList] = React.useState([])\n  const [list1, setList1] = React.useState([])\n  const [statusImg, setStatusImg] = React.useState(false)\n  const [open, setOpen] = React.useState(false)\n  // const [status, setStatus] = React.useState(\"true\")\n  // const [curTime, setcurTime] = React.useState()\n  const [didMount, setDidMount] = React.useState(false)\n  const globalId = React.useContext(IdContext)\n  // const [active, setActive] = React.useState(\"\")\n  const socket = React.useContext(SocketContext);\n  // new Date().toLocaleString()\n\n  const getLocalisation = React.useCallback(async () => {\n    await Axios.post(`/browsing/geo/${globalId}`).then((res) => {\n      setGender(res.data.type)\n      setCord(res.data.geo)\n    })\n  }, [globalId])\n\n  React.useEffect(() => {\n    Axios.post(`/base/img/fetch/${globalId}`, {\n      userId: globalId,\n    }).then((res) => {\n      if (res.data.s === 0){\n        /// update status in db with 3 if khass\n        setStatusImg(true)\n      }\n      else{\n        /// update status in db with 2 if khass\n        setStatusImg(false)\n      }\n    })\n    if (cord.length) {\n      Axios.post(`/browsing/${globalId}`, {\n        cord: cord,\n        gender: gender,\n      }).then((res) => {\n        if (res.data){\n          setList(res.data)\n          setList1(res.data)  \n        }\n      })\n    } else getLocalisation()\n    setDidMount(true)\n    return () => setDidMount(false);\n  }, [cord, gender, getLocalisation, globalId])\n\n  const handelLike = (event, idLiker, idLiked) => {\n    event.preventDefault()\n    Axios.post(`/browsing/likes/${idLiker}`, { idLiked: idLiked }).then(res => {\n      if (res.data.status) {\n        const newList = list1.filter((item) => item.id !== idLiked)\n        setList1(newList)\n\n        // like && like back Notif\n\n        Axios.post('http://localhost:3001/notifications/doILikeHim', { myId: idLiker, hisId: idLiked })\n          .then((res) => {\n            if (res.data.answer == \"yes\") {\n              Axios.post('http://localhost:3001/notifications/saveNotifications',\n                { who: idLiker, target: idLiked, type: \"likes back\" })\n                .then((res) => {\n                }).catch((err) => {console.log(err)});\n            }\n            else if(res.data.answer == \"no\")\n            {\n              Axios.post('http://localhost:3001/notifications/saveNotifications',\n                { who: idLiker, target: idLiked, type: \"like\" })\n                .then((res) => {\n                }).catch((err) => {console.log(err)});\n            } \n\n          }).catch((Err) => { console.log('10_1.Err', Err) })\n\n        socket.emit('new_like', { who: idLiker, target: idLiked });\n      }\n    })\n  }\n\n  const handelSkip = (event, idLiked) => {\n    event.preventDefault()\n    const newList = list1.filter((item) => item.id !== idLiked)\n    setList1(newList)\n    if (list1.length === 1)\n      getLocalisation()\n  }\n  \n\n  const handelDeslike = (event, idLiker, idLiked) => {\n    event.preventDefault()\n    if (statusImg)\n      setOpen(true)\n    else{\n      Axios.post(`/browsing/deslike/${idLiker}`, {idLiked: idLiked}).then(res => {\n        if (res.data.status) {\n          const newList = list1.filter((item) => item.id !== idLiked)\n          setList1(newList)\n        }\n      })\n    }\n  }\n\n\n  React.useEffect(() => {\n    \n    const interval = setInterval(() => {\n      if (open)\n        setOpen(false)\n    }, 1500);\n    return () => clearInterval(interval);\n  })\n\n  if (!didMount)\n    return null\n\n  return (\n    <div className={classes.diva}>\n      <Collapse in={open}>\n        <Alert  severity=\"error\">\n          Add at least one image to your profil.\n        </Alert>\n      </Collapse>\n      <Grid\n        container\n        className={classes.container}\n        justify='center'\n        alignItems='center'\n      >\n        <Grid item xs={12} sm={2}>\n          <SortComponent setList={setList1} list={list1} />\n        </Grid>\n        <Grid item xs={12} sm={2}>\n          <Map list={list} />\n        </Grid>\n        <Grid item xs={12} sm={2}>\n          <Search\n            setList={setList}\n            setList1={setList1}\n            cord={cord}\n            gender={gender}\n            id={props.id}\n          />\n        </Grid>\n        <Grid item xs={12} sm={5}>\n          <Filter setList1={setList1} list={list} />\n        </Grid>\n        <Container className={classes.copy} component='main' fixed disableGutters>\n        {list1 &&\n            list1\n              .map((el, key) => {\n                const imageProfil = el.images.split(',')\n                return (\n                  <Card className={classes.root} key={key}>\n                    <CardHeader\n                      avatar={\n                        <StyledBadge\n                          overlap='circle'\n                          anchorOrigin={{\n                            vertical: 'bottom',\n                            horizontal: 'right',\n                          }}\n                          variant='dot'\n                        >\n                          <Avatar\n                            aria-label='recipe'\n                            src={`http://localhost:3001/${imageProfil[0]}`}\n                            alt={`test${imageProfil[0]}`}\n                          />\n                        </StyledBadge>\n                      }\n                      action={\n                        <IconButton aria-label='settings'>\n                          <Profil\n                            visitor={props.id}\n                            visited={el.id}\n                            element={el}\n                            list={list1}\n                            setlist={setList1}\n                            StyledBadge={StyledBadge}\n                            statusImg={statusImg}\n                            setOpen={setOpen}\n                          />\n                        </IconButton>\n                      }\n                      title={el.userName}\n                      subheader={el.firstName + ' ' + el.lastName}\n                    />\n                    <CardContent>\n                      <Typography variant='h6'>Biography :</Typography>\n                      <Typography\n                        variant='body2'\n                        color='textSecondary'\n                        component='p'\n                      >\n                        {el.bio}\n                      </Typography>\n                    </CardContent>\n                    <CardActions disableSpacing>\n                      <IconButton\n                        aria-label='add to favorites'\n                        onClick={(event) =>\n                          handelLike(event, props.id, el.id)\n                        }\n                      >\n                        <Favorite style={{ color: 'green' }} />\n                      </IconButton>\n                      <IconButton\n                        aria-label='skip'\n                        onClick={(event) => handelSkip(event, el.id)}\n                      >\n                        <SkipNextIcon style={{ color: 'DarkBlue' }} />\n                      </IconButton>\n                      <IconButton\n                        className={clsx(classes.expand)}\n                        aria-label='NotInterested'\n                        onClick={(event) =>\n                          handelDeslike(event, props.id, el.id)\n                        }\n                      >\n                        <ThumbDownIcon color='secondary' />\n                      </IconButton>\n                    </CardActions>\n                  </Card>\n                )\n              })\n              .splice(0, 20)}\n        </Container>\n      </Grid>\n    </div>\n  )\n}\n\nexport default Browsing","/Users/anelamra/Desktop/merged/client/src/component/history/history.js",[],"/Users/anelamra/Desktop/merged/client/src/component/Notifications/Notifications.js",["171","172","173","174","175","176","177","178","179"],"import React from 'react';\n// import { makeStyles } from '@material-ui/core/styles';\nimport Popover from '@material-ui/core/Popover';\nimport Typography from '@material-ui/core/Typography';\nimport Axios from \"axios\"\nimport Badge from '@material-ui/core/Badge';\nimport MailIcon from '@material-ui/icons/Mail';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport { StylesProvider } from \"@material-ui/core/styles\";\nimport \"./notifications.css\";\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\n\nimport SocketContext from \"../../start/SocketContext\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        maxWidth: '36ch',\n        backgroundColor: theme.palette.background.paper,\n    },\n    inline: {\n        display: 'inline',\n    },\n    Troot: {\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n    },\n    // bdg : {\n    //     backgroundColor: 'pink'\n    // }\n}));\n\nconst Notifications = (props) => {\n    const classes = useStyles();\n\n    const socket = React.useContext(SocketContext);\n    const [notifNumber, SetNotifNumber] = React.useState(0);\n    const [notifications, setNotifications] = React.useState([]);\n    // const [messageNumber, SetmessageNumber] = React.useState(0);\n\n    function isEmpty(obj) {\n        for (var prop in obj) {\n            if (obj.hasOwnProperty(prop)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n        SetNotifNumber(0);\n        getUserNotifs(props)\n    };\n\n    const getUserNotifs = (props) => {\n        console.log(props);\n        Axios.post('http://localhost:3001/notifications/getUserNotifs', { userId: props.myInfos.id })\n            .then((res) => {\n                console.log('111111');\n                if (isEmpty(res.data.whoInfos) == false) {\n                    setNotifications(res.data.whoInfos);\n                    console.log('saved notif', res.data.whoInfos);\n                }\n            }).catch((Err) => { console.log('10_1.Err', Err) })\n    }\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const snn = (x) => {\n        SetNotifNumber(\" \");\n    }\n\n    const open = Boolean(anchorEl);\n    const id = open ? 'simple-popover' : undefined;\n\n    // React.useEffect(() => {\n    socket.on('receive_like', (data) => {\n        console.log('|-----=> ', data);\n        if (data.target === props.myInfos.id)\n            snn(notifNumber);\n    })\n    socket.on('receive_visit', (data) => {\n        console.log('|---visit=> ', data);\n        if (data.target === props.myInfos.id)\n            snn(notifNumber);\n    })\n    socket.on('receive_dislike', (data) => {\n\n        console.log('|---dislike=> ', data.target, props.myInfos.id);\n        if (data.idDisliked === props.myInfos.id)\n            snn(notifNumber);\n\n    })\n\n    // }, []);\n    console.log('notifications', notifications)\n    return (\n        <StylesProvider injectFirst>\n\n            <div className={classes.Troot}>\n                <Badge className={classes.bdg} badgeContent={notifNumber} aria-describedby={id} color=\"secondary\" onClick={handleClick}>\n                    <NotificationsIcon />\n                </Badge>\n                <Popover\n                    id={id}\n                    open={open}\n                    anchorEl={anchorEl}\n                    onClose={handleClose}\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'center',\n                    }}\n                    transformOrigin={{\n                        vertical: 'top',\n                        horizontal: 'center',\n                    }}\n                >\n                    {\n                        (notifications.length === 0) ? <Typography>nulllllllllll</Typography>\n                            :\n                            notifications.map((el) => {\n                                if (el.type != \"message\") {\n\n                                    return (\n                                        <List className={classes.root}>\n\n                                            <ListItem alignItems=\"flex-start\">\n                                                <ListItemAvatar>\n                                                    <Avatar alt={`${el.userName}image`} src={`http://localhost:3001/${el.image}`} />\n                                                </ListItemAvatar>\n                                                <ListItemText\n                                                    primary={\n                                                        el.type == \"like\" ? \"New like\"\n                                                            :\n                                                            el.type == \"visit\" ? \"New visit\"\n                                                                :\n                                                                el.type == \"likes back\" ? \"Matched\"\n                                                                    :\n                                                                    el.type == \"dislike\" ? \"Unmatched\" : ''\n                                                    }\n                                                    secondary={\n                                                        <React.Fragment>\n                                                            <Typography\n                                                                component=\"span\"\n                                                                variant=\"body2\"\n                                                                className={classes.inline}\n                                                                color=\"textPrimary\"\n                                                            >\n                                                                {el.userName}\n                                                            </Typography>\n                                                            {`${el.type}your profile`}\n                                                        </React.Fragment>\n                                                    }\n                                                />\n                                            </ListItem>\n                                            <Divider variant=\"inset\" component=\"li\" />\n\n                                        </List>\n                                    )\n                                }\n                            })\n                    }\n\n                </Popover>\n                {/* <Badge badgeContent={messageNumber} color=\"primary\">\n                        <MailIcon />\n            </Badge> */}\n                {/* <Badge badgeContent={notifNumber} color=\"primary\">\n                <NotificationsIcon />\n            </Badge> */}\n            </div>\n        </StylesProvider>\n    )\n};\n\n\n\n\n\nexport default Notifications;","/Users/anelamra/Desktop/merged/client/src/component/Notifications/MessageNotification.js",["180","181","182","183","184","185"],"import React from 'react';\n// import { makeStyles } from '@material-ui/core/styles';\nimport Popover from '@material-ui/core/Popover';\nimport Typography from '@material-ui/core/Typography';\nimport Axios from \"axios\"\nimport Badge from '@material-ui/core/Badge';\nimport MailIcon from '@material-ui/icons/Mail';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport { StylesProvider } from \"@material-ui/core/styles\";\nimport \"./notifications.css\";\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\n\nimport SocketContext from \"../../start/SocketContext\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n\n        maxWidth: '36ch',\n        backgroundColor: theme.palette.background.paper,\n    },\n    inline: {\n        display: 'inline',\n    },\n    Troot: {\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n    },\n    // bdg : {\n    //     backgroundColor: 'pink'\n    // }\n}));\n\nconst MessageNotification = (props) => {\n    const classes = useStyles();\n\n    const socket = React.useContext(SocketContext);\n    const [messageNumber, SetmessageNumber] = React.useState(0);\n    const [msgNotifications, setMsgNotifications] = React.useState([]);\n\n    function isEmpty(obj) {\n        for (var prop in obj) {\n            if (obj.hasOwnProperty(prop)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n        SetmessageNumber(0);\n        getUserNotifs(props)\n    };\n\n    const getUserNotifs = (props) => {\n        console.log(props);\n        Axios.post('http://localhost:3001/notifications/getUserNotifs', { userId: props.myInfos.id })\n            .then((res) => {\n                console.log('111111');\n                if (isEmpty(res.data.whoInfos) == false) {\n                    setMsgNotifications(res.data.whoInfos);\n                    console.log('saved notif msg', res.data.whoInfos);\n                }\n            }).catch((Err) => { console.log('10_1.Err', Err) })\n    }\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const snn = (x) => {\n        SetmessageNumber(\" \");\n    }\n\n    const open = Boolean(anchorEl);\n    const id = open ? 'simple-popover' : undefined;\n\n    React.useEffect(() => {\n    socket.on('new_msg', (data) => {\n        console.log('receive_msf|-----=> ', data);\n        if (data.target === props.myInfos.id)\n            snn(messageNumber);\n    })\n    }, []);\n    console.log('msg Notifications', msgNotifications)\n    return (\n        <StylesProvider injectFirst>\n\n            <div className={classes.Troot}>\n                <Badge className={classes.bdg} badgeContent={messageNumber} aria-describedby={id} color=\"secondary\" onClick={handleClick}>\n                <MailIcon />\n                </Badge>\n                <Popover\n                    id={id}\n                    open={open}\n                    anchorEl={anchorEl}\n                    onClose={handleClose}\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'center',\n                    }}\n                    transformOrigin={{\n                        vertical: 'top',\n                        horizontal: 'center',\n                    }}\n                >\n                    {\n                        (msgNotifications.length === 0) ? <Typography>nulllllllllll</Typography>\n                            :\n                            msgNotifications.map((el) => {\n                                if (el.type == \"message\") {\n\n                                    return (\n                                        <List className={classes.root}>\n\n                                            <ListItem alignItems=\"flex-start\">\n                                                <ListItemAvatar>\n                                                    <Avatar alt={`${el.userName}image`} src={`http://localhost:3001/${el.image}`} />\n                                                </ListItemAvatar>\n                                                <ListItemText\n                                                    primary={el.userName}\n                                                    secondary={\n                                                        <React.Fragment>\n                                                            <Typography\n                                                                component=\"span\"\n                                                                variant=\"body2\"\n                                                                className={classes.inline}\n                                                                color=\"textPrimary\"\n                                                            >\n                                                                {' '}\n                                                            </Typography>\n                                                            {`New message from ${el.userName }`}\n                                                        </React.Fragment>\n                                                    }\n                                                />\n                                            </ListItem>\n                                            <Divider variant=\"inset\" component=\"li\" />\n\n                                        </List>\n                                    )\n                                }\n                            })\n                    }\n\n                </Popover>\n                {/* <Badge badgeContent={messageNumber} color=\"primary\">\n                        <MailIcon />\n            </Badge> */}\n                {/* <Badge badgeContent={notifNumber} color=\"primary\">\n                <NotificationsIcon />\n            </Badge> */}\n            </div>\n        </StylesProvider>\n    )\n};\n\n\n\n\n\nexport default MessageNotification;","/Users/anelamra/Desktop/merged/client/src/component/allProfil/likeProfil.js",["186"],"import React from 'react';\nimport Axios from 'axios'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Card, Chip, Avatar, Grid, Button, Typography, IconButton, CardMedia, Collapse } from '@material-ui/core'\nimport { Alert } from \"@material-ui/lab\";\nimport Rating from \"react-rating\";\nimport Report from '../browsing/report'\nimport 'react-responsive-carousel/lib/styles/carousel.min.css' // requires a loader\nimport { Carousel } from 'react-responsive-carousel'\nimport {  FaFemale ,FaMale  } from \"react-icons/fa\"\nimport {\n  Block as BlockIcon,\n  FavoriteBorder,\n  Update as UpdateIcon,\n} from \"@material-ui/icons\";\nimport SocketContext from \"../../start/SocketContext\";\n\nconst useStyles = makeStyles((theme) => ({\n  diva: {\n    height: '100vh',\n  },\n  media: {\n    height: '40vh',\n  },\n  typo: {\n    marginLeft: '1vw',\n    marginTop: '1vw'\n  },\n  typo1: {\n    marginLeft: '1vw',\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  Button: {\n    marginTop: '2vw',\n    marginLeft: '40vw'\n  },\n  grid: {\n    margin: theme.spacing(1),\n  }\n}))\n\n\n\n\nconst LikeProfil = (props) => {\n    const socket = React.useContext(SocketContext);\n    const [cord, setCord] = React.useState([])\n    const [gender, setGender] = React.useState('')\n    const classes = useStyles()\n    const [list, setList] = React.useState([])\n    const [didMount, setDidMount] = React.useState(false)\n    const [statusImg, setStatusImg] = React.useState(false)\n    const [open, setOpen] = React.useState(false)\n\n\n    const getLocalisation = React.useCallback(async () => {\n        await Axios.post(`/browsing/geo/${props.id}`).then((res) => {\n            setGender(res.data.type)\n            setCord(res.data.geo)\n        })\n        \n    }, [props.id])\n\n    React.useEffect(() => {\n        Axios.post(`/base/img/fetch/${props.id}`, {\n          userId: props.id,\n        }).then((res) => {\n          if (res.data.s === 0){\n            /// update status in db with 3 if khass\n            setStatusImg(true)\n          }\n          else{\n            /// update status in db with 2 if khass\n            setStatusImg(false)\n          }\n        })\n        if (cord.length) {\n            Axios.post(`/allProfil/${props.id}`, {\n                cord: cord,\n                gender: gender,\n            }).then((res) => {\n                if (res.data){\n                    setList(res.data)\n                }\n            })\n        } else getLocalisation()\n        setDidMount(true);\n        return () => setDidMount(false);\n\n    }, [cord, gender, getLocalisation, props.id])\n\n\n\n    const handelBlock = (e, user1, user2) => {\n        if (statusImg)\n          setOpen(true)\n        else{\n          Axios.post(`/block/${user1}`, {blocked: user2}).then(res => {\n              if (res.data.status){\n                  const newList = list.filter((item) => item.id !== user2)\n                  setList(newList)\n              }\n          })\n        }\n    }\n\n    const nextUser = (event, id) => {\n        event.preventDefault()\n        const newList = list.filter((item) => item.id !== id)\n        setList(newList)\n        if (list.length === 1)\n            getLocalisation()\n    }\n\n    const handelUnlike = (e, user1, user2) => {\n      e.preventDefault()\n      // matched user disliked you notif\n      Axios.post('http://localhost:3001/notifications/isMatched', { myId: user1, hisId: user2 })\n      .then((res) => {\n        if (res.data.answer == \"yes\") {\n          Axios.post('http://localhost:3001/notifications/saveNotifications',\n          { who: user1, target: user2, type: \"dislike\" })\n          .then((res) => {\n          }).catch((err) => {console.log(err)});\n        }\n        socket.emit('new_dislike', { who: user1, target: user2 });\n      }).catch((Err) => { console.log('10_5.Err', Err) })\n      ///   \n\n      Axios.post(`/browsing/unlike/${user1}`, {user2 : user2}).then(res => {\n          if (res.data.status){\n              const newList = list.filter((item) => item.id !== user2)\n              setList(newList)\n          }\n      })\n  }\n\n    const historyLikeProfil = (e, visited, visitor) => {\n      e.preventDefault()\n      Axios.post(`/browsing/history/${visitor}`, { visitor: visited })\n    };\n\n    React.useEffect(() => {\n      const interval = setInterval(() => {\n        if (open)\n          setOpen(false)\n      }, 1500);\n      return () => clearInterval(interval);\n    })\n\n    if (!didMount)\n      return null\n\n    return (\n        <React.Fragment>  \n          <Collapse in={open}>\n            <Alert  severity=\"error\">\n              Add at least one image to your profil.\n            </Alert>\n          </Collapse>\n            {list && list.map((el, iKey) => {\n                return (\n                  <React.Fragment key={iKey}>\n                    <div className={classes.diva}>\n                      <Card>\n                        <Grid\n                          container\n                          justify=\"center\"\n                          alignItems=\"center\"\n                          direction=\"column\"\n                          spacing={2}\n                        >\n                          <Grid item xs={12} sm={3}>\n                            <Typography\n                              variant=\"h6\"\n                              gutterBottom\n                              align=\"center\"\n                            >\n                              {el.userName}\n                            </Typography>\n                            <Carousel autoPlay showThumbs={false}>\n                              {el.images.split(\",\").length > 1\n                                ? el.images.split(\",\").map((el, iKey) => {\n                                    let srcImg = `http://localhost:3001/${el}`;\n                                    let altImg = `display all image loop${iKey}`;\n                                    return (\n                                      <div key={iKey}>\n                                        <CardMedia\n                                          className={classes.media}\n                                          image={srcImg}\n                                          title={altImg}\n                                        />\n                                        <p>{altImg}</p>\n                                      </div>\n                                    );\n                                  })\n                                : \"\"}\n                            </Carousel>\n                          </Grid>\n                          <Grid container item xs={12} sm={2}>\n                            <Avatar\n                              aria-label=\"recipe\"\n                              src={`http://localhost:3001/${\n                                el.images.split(\",\")[0]\n                              }`}\n                              alt={`test${el.images.split(\",\")[0]}`}\n                            />\n\n                            <Typography className={classes.typo}>\n                              {\"  \" +\n                                el.firstName +\n                                \" \" +\n                                el.lastName +\n                                \", \" +\n                                el.age +\n                                \" \"}\n                              {el.gender === \"Male\" && (\n                                <FaMale style={{ color: \"green\" }} />\n                              )}\n                              {el.gender === \"Women\" && (\n                                <FaFemale style={{ color: \"pink\" }} />\n                              )}\n                            </Typography>\n                            <Typography\n                              className={classes.typo1}\n                              variant=\"body2\"\n                            >\n                              {el.city + \" | \" + el.km.toFixed(2) + \"  km\"}\n                            </Typography>\n                          </Grid>\n                          <Grid container item xs={12} sm={2}>\n                            {el.tag2 && el.tag2.split(\",\").length > 0\n                              ? el.tag2.split(\",\").map((el, iKey) => {\n                                  return (\n                                    <div key={iKey}>\n                                      <Chip\n                                        color=\"primary\"\n                                        variant=\"outlined\"\n                                        size=\"small\"\n                                        label={el}\n                                      />\n                                    </div>\n                                  );\n                                })\n                              : \"\"}\n                            <Grid container className={classes.grid}>\n                              <Typography>tag in common :</Typography>\n                            </Grid>\n                            {el.tag1 && el.tag1.split(\",\").length > 0 ? (\n                              el.tag1.split(\",\").map((el, iKey) => {\n                                return (\n                                  <div key={iKey}>\n                                    <Chip\n                                      color=\"secondary\"\n                                      variant=\"outlined\"\n                                      size=\"small\"\n                                      label={el}\n                                    />\n                                  </div>\n                                );\n                              })\n                            ) : (\n                              <Typography color=\"secondary\" variant=\"caption\">\n                                {\"Nothing to in common\"}\n                              </Typography>\n                            )}\n                          </Grid>\n                          <Grid container item xs={12} sm={2}>\n                            <Typography color=\"primary\" variant=\"caption\">\n                              {el.bio}\n                            </Typography>\n                          </Grid>\n                          <Grid container item xs={12} sm={2}>\n                            {0 < el.fameRating && el.fameRating < 50 && (\n                              <Typography\n                                style={{ color: \"Gold\" }}\n                                variant=\"caption\"\n                              >\n                                <Rating\n                                  style={{ pointerEvents: \"none\" }}\n                                  initialRating={1}\n                                />\n                                <br />\n                                {el.fameRating + \" exp Useless\"}\n                              </Typography>\n                            )}\n                            {50 < el.fameRating && el.fameRating < 150 && (\n                              <Typography\n                                style={{ color: \"Gold\" }}\n                                variant=\"caption\"\n                              >\n                                <Rating\n                                  style={{ pointerEvents: \"none\" }}\n                                  initialRating={1}\n                                />\n                                <br />\n                                {el.fameRating + \" exp Useless+\"}\n                              </Typography>\n                            )}\n                            {150 < el.fameRating && el.fameRating < 250 && (\n                              <Typography\n                                style={{ color: \"Gold\" }}\n                                variant=\"caption\"\n                              >\n                                <Rating\n                                  style={{ pointerEvents: \"none\" }}\n                                  initialRating={2}\n                                />\n                                <br />\n                                {el.fameRating + \" exp Poor\"}\n                              </Typography>\n                            )}\n                            {250 < el.fameRating && el.fameRating < 350 && (\n                              <Typography\n                                style={{ color: \"Gold\" }}\n                                variant=\"caption\"\n                              >\n                                <Rating\n                                  style={{ pointerEvents: \"none\" }}\n                                  initialRating={2}\n                                />\n                                <br />\n                                {el.fameRating + \" exp Poor+\"}\n                              </Typography>\n                            )}\n                            {350 < el.fameRating && el.fameRating < 450 && (\n                              <Typography\n                                style={{ color: \"Gold\" }}\n                                variant=\"caption\"\n                              >\n                                <Rating\n                                  style={{ pointerEvents: \"none\" }}\n                                  initialRating={3}\n                                />\n                                <br />\n                                {el.fameRating + \" exp Ok\"}\n                              </Typography>\n                            )}\n                            {450 < el.fameRating && el.fameRating < 550 && (\n                              <Typography\n                                style={{ color: \"Gold\" }}\n                                variant=\"caption\"\n                              >\n                                <Rating\n                                  style={{ pointerEvents: \"none\" }}\n                                  initialRating={3}\n                                />\n                                <br />\n                                {el.fameRating + \" exp Ok+\"}\n                              </Typography>\n                            )}\n                            {550 < el.fameRating && el.fameRating < 650 && (\n                              <Typography\n                                style={{ color: \"Gold\" }}\n                                variant=\"caption\"\n                              >\n                                <Rating\n                                  style={{ pointerEvents: \"none\" }}\n                                  initialRating={4}\n                                />\n                                <br />\n                                {el.fameRating + \" exp Good\"}\n                              </Typography>\n                            )}\n                            {650 < el.fameRating && el.fameRating < 750 && (\n                              <Typography\n                                style={{ color: \"Gold\" }}\n                                variant=\"caption\"\n                              >\n                                <Rating\n                                  style={{ pointerEvents: \"none\" }}\n                                  initialRating={4}\n                                />\n                                <br />\n                                {el.fameRating + \" exp Good+\"}\n                              </Typography>\n                            )}\n                            {750 < el.fameRating && el.fameRating < 850 && (\n                              <Typography\n                                style={{ color: \"Gold\" }}\n                                variant=\"caption\"\n                              >\n                                <Rating\n                                  style={{ pointerEvents: \"none\" }}\n                                  initialRating={5}\n                                />\n                                <br />\n                                {el.fameRating + \" exp Excellent\"}\n                              </Typography>\n                            )}\n                            {850 < el.fameRating && el.fameRating < 1001 && (\n                              <Typography\n                                style={{ color: \"Gold\" }}\n                                variant=\"caption\"\n                              >\n                                <Rating\n                                  style={{ pointerEvents: \"none\" }}\n                                  initialRating={5}\n                                />\n                                <br />\n                                {el.fameRating + \" exp Excellent+\"}\n                              </Typography>\n                            )}\n                          </Grid>\n                          <Grid container item xs={12} sm={2} direction=\"row\">\n                            <IconButton\n                              aria-label=\"Block User\"\n                              onClick={(event) =>\n                                handelBlock(event, props.id, el.id)\n                              }\n                            >\n                              <BlockIcon />\n                            </IconButton>\n                            <Report\n                              visitor={props.id}\n                              visited={el.id}\n                              statusImg={statusImg}\n                              setOpen={setOpen}\n                            />\n                            <IconButton\n                              aria-label=\"History refresh\"\n                              onClick={(event) =>\n                                historyLikeProfil(event, props.id, el.id)\n                              }\n                            >\n                              <UpdateIcon />\n                            </IconButton>\n                            <IconButton\n                              aria-label=\"Unlike user\"\n                              onClick={(event) =>\n                                handelUnlike(event, props.id, el.id)\n                              }\n                            >\n                              <Typography>Unlike</Typography>\n                              <FavoriteBorder />\n                            </IconButton>\n                          </Grid>\n                        </Grid>\n                      </Card>\n                      <Button\n                        autoFocus\n                        variant=\"outlined\"\n                        onClick={(event) => nextUser(event, el.id)}\n                        style={{ color: \"DarkBlue\" }}\n                      >\n                        Next user\n                      </Button>\n                    </div>\n                  </React.Fragment>\n                );\n            }).slice(0, 1)}\n        </React.Fragment>\n    )\n}\n\nexport default LikeProfil;","/Users/anelamra/Desktop/merged/client/src/component/chat/ChatBox.js",["187","188","189","190","191","192","193"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Typography, IconButton, Collapse } from \"@material-ui/core\";\nimport { Input, Grid, List, Chip } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport {\n  Block as BlockIcon,\n  Update as UpdateIcon,\n} from \"@material-ui/icons\";\nimport SocketContext from \"../../start/SocketContext\";\nimport Axios from \"axios\";\nimport \"./ChatBox.js\";\nimport Report from \"../browsing/report\";\n\nconst useStyles = makeStyles((theme) => ({\n  chatBox: {\n    height: \"100%\",\n    backgroundColor: \"white\",\n    position: \"relative\",\n  },\n  messages: {\n    padding: \"14px\",\n  },\n  textInput: {\n    position: \"absolute\",\n    bottom: 0,\n    color: \"purple\",\n    width: \"100%\",\n  },\n  right: {\n    wordBreak: \"break-all\",\n    padding: \"10px\",\n  },\n  left: {\n    wordBreak: \"break-all\",\n    padding: \"10px\",\n  },\n  myText: {\n    width: \"fit-content\",\n    borderRadius: \"7px\",\n    backgroundColor: \"#e6b4e4\",\n    padding: \"10px\",\n    float: \"right\",\n  },\n  hisText: {\n    color: \"white\",\n    width: \"fit-content\",\n    borderRadius: \"7px\",\n    backgroundColor: \"#000000a8\",\n    padding: \"10px\",\n  }\n}));\nconst isEmpty = (obj) => {\n  for (var prop in obj) {\n    if (obj.hasOwnProperty(prop)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst ChatBox = (props) => {\n  const [conversation, setCoversation] = React.useState([]);\n  const classes = useStyles();\n  const [list, setList] = React.useState([]);\n  const [statusImg, setStatusImg] = React.useState(false);\n  const [open, setOpen] = React.useState(false);\n\n  const socket = React.useContext(SocketContext);\n\n  const func = React.useCallback(async () => {\n    if (!isEmpty(props.hisInfos)) {\n      await Axios.post(\"http://localhost:3001/chat/getConversation\", {\n        user1: props.id,\n        user2: props.hisInfos.id,\n      })\n        .then((res) => {\n          if (res.data.response.length != 0) {\n            setCoversation(res.data.response);\n          }\n          if (res.data.response === \"\") {\n            setCoversation([]);\n          }\n        })\n        .catch((err) => {\n          console.log(\"ErR\" + err);\n        });\n    }\n  }, [props]);\n\n  React.useEffect(() => {\n    Axios.post(`/base/img/fetch/${props.id}`, {\n      userId: props.id,\n    }).then((res) => {\n      if (res.data.s === 0) {\n        /// update status in db with 3 if khass\n        setStatusImg(true);\n      } else {\n        /// update status in db with 2 if khass\n        setStatusImg(false);\n      }\n    });\n    func();\n  }, [func, props]);\n\n  const updateScroll = () => {\n    var element = document.getElementById(\"t\")\n    element.scrollTop = element.scrollHeight - element.clientHeight;\n  }\n\n  const sendMessage = (e) => {\n    e.preventDefault();\n    if (props.hisInfos) {\n      var input = document.getElementById(\"msg\");\n      if (e.keyCode === 13 && input.value) {\n\n        saveMessage(input.value);\n        Axios.post(\"http://localhost:3001/notifications/saveNotifications\", {\n          who: props.id,\n          target: props.hisInfos.id,\n          type: \"message\",\n        });\n        socket.emit(\"msg\", {\n          text: input.value,\n          from: props.myInfos.id,\n          to: props.hisInfos.id,\n        });\n        input.value = \"\";\n      }\n    }\n  };\n\n  React.useEffect(() => {\n    socket.on(\"new_msg\", (data) => {\n      setCoversation((conversation) => [\n        ...conversation,\n        {\n          id: conversation.length\n            ? conversation[conversation.length - 1].id + 1\n            : 1,\n          id_from: data.from,\n          id_to: data.to,\n          content: data.msg,\n        },\n      ]);\n    });\n  }, []);\n\n  const saveMessage = (content) => {\n    Axios.post(\"http://localhost:3001/chat/saveMessage\", {\n      from: props.id,\n      to: props.hisInfos.id,\n      content: content,\n    })\n      .then((res) => {\n        setCoversation((conversation) => [\n          ...conversation,\n          {\n            id: conversation.length\n              ? conversation[conversation.length - 1].id + 1\n              : 1,\n            id_from: props.id,\n            id_to: props.hisInfos.id,\n            content: content,\n          },\n        ]);\n      updateScroll();\n\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const handelBlock = (e, user1, user2) => {\n    console.log(user2);\n    if (statusImg) setOpen(true);\n    else {\n    Axios.post(`/block/${user1}`, { blocked: user2 }).then((res) => {\n      if (res.data.status) {\n          const newList = props.people.filter((item) => item.id !== user2);\n          props.setPeople(newList);\n      }\n    });\n    }\n  };\n\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      if (open) setOpen(false);\n    }, 1500);\n\n    return () => clearInterval(interval);\n  });\n\n  if (!isEmpty(props.hisInfos)) {\n    return (\n      <div className={classes.chatBox}>\n        <Collapse in={open}>\n          <Alert severity=\"error\">Add at least one image to your profil.</Alert>\n        </Collapse>\n        <Grid container direction=\"column\" spacing={2} className=\"messages\">\n          <Grid container item xs={12} direction=\"row\">\n            <IconButton\n              aria-label=\"Block User\"\n              color=\"secondary\"\n              onClick={(event) =>\n                handelBlock(event, props.id, props.hisInfos.id)\n              }\n            >\n              <BlockIcon />\n            </IconButton>\n            <Report\n              visitor={props.id}\n              visited={props.hisInfos.id}\n              statusImg={statusImg}\n              setOpen={setOpen}\n            />\n          </Grid>\n          <List id=\"t\" style={{ maxHeight: 300, overflow: \"auto\" }}>\n            {conversation.length != 0 &&\n              conversation.map((element) => {\n                if (element.id_from == props.myInfos.id) {\n                  return (\n                    //hnaya1\n                    <Grid item container className={classes.me}>\n                      <Grid item sm={4}></Grid>\n                      <Grid item sm={8} className={classes.right}>\n                        <Chip\n                          className={classes.myText}\n                          variant=\"outlined\"\n                          size=\"small\"\n                          label={element.content}\n                        />\n                      </Grid>\n                    </Grid>\n                  );\n                } else {\n                  return (\n                    <Grid item container className={classes.him}>\n                      <Grid item sm={8} className={classes.left}>\n                        <Chip\n                          className={classes.hisText}\n                          variant=\"outlined\"\n                          size=\"small\"\n                          label={element.content}\n                        />\n                      </Grid>\n                      <Grid item sm={4}></Grid>\n                    </Grid>\n                  );\n                }\n              })}\n            {!conversation.length && (\n              <Typography\n                variant=\"body2\"\n                color=\"textSecondary\"\n                component=\"p\"\n              >\n                &nbsp;&nbsp;&nbsp;&nbsp;Say hello ...\n              </Typography>\n            )}\n          </List>\n        </Grid>\n        <Input\n          id=\"msg\"\n          type=\"text\"\n          className={classes.textInput}\n          placeholder=\"Message\"\n          onKeyUp={sendMessage}\n        />\n      </div>\n    );\n  } else {\n    return (\n      <div className={classes.chatBox}>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          &nbsp;&nbsp;&nbsp;&nbsp;select the user you want to chat with\n        </Typography>\n      </div>\n    );\n  }\n};\n\nexport default ChatBox;\n","/Users/anelamra/Desktop/merged/client/src/component/chat/LeftSection.js",["194","195","196","197","198","199","200"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport SwipeableViews from \"react-swipeable-views\";\nimport { StylesProvider , makeStyles, useTheme, withStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport { Grid, Tabs, Tab, AppBar, Paper, List ,ListItem ,ListItemSecondaryAction ,ListItemText ,ListItemAvatar ,Checkbox ,Avatar, Badge, Hidden } from '@material-ui/core';\n\n\nconst StyledBadge = withStyles((theme) => ({\n    badge: {\n      backgroundColor: '#44b700',\n      color: '#44b700',\n      boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\n      '&::after': {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        borderRadius: '50%',\n        animation: '$ripple 1.2s infinite ease-in-out',\n        border: '1px solid currentColor',\n        content: '\"\"',\n      },\n    },\n    '@keyframes ripple': {\n      '0%': {\n        transform: 'scale(.8)',\n        opacity: 1,\n      },\n      '100%': {\n        transform: 'scale(2.4)',\n        opacity: 0,\n      },\n    },\n  }))(Badge);\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n  // console.log(\"props\", props);\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`full-width-tabpanel-${index}`}\n      aria-labelledby={`full-width-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `full-width-tab-${index}`,\n    \"aria-controls\": `full-width-tabpanel-${index}`\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  Left: {\n    backgroundColor: theme.palette.background.paper,\n    // width: 500\n    height: \"70vh\"\n  }\n}));\n\nexport default function FullWidthTabs(props) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [value, setValue] = React.useState(0);\n\n  \n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const handleChangeIndex = (index) => {\n    setValue(index);\n  };\n\n  return (\n    <div className={classes.Left}>\n      <AppBar position=\"static\" color=\"default\">\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"fullWidth\"\n          aria-label=\"full width tabs example\"\n        >\n          <Tab label=\"Chats\" {...a11yProps(0)} />\n          {/* <Tab label=\"People(matched)\" {...a11yProps(1)} /> */}\n        </Tabs>\n      </AppBar>\n      <SwipeableViews\n        axis={theme.direction === \"rtl\" ? \"x-reverse\" : \"x\"}\n        index={value}\n        onChangeIndex={handleChangeIndex}\n      >\n        {/* <TabPanel value={value} index={0} dir={theme.direction}>\n          Conversations.....\n        </TabPanel> */}\n        <TabPanel\n          id=\"99909090090\"\n          value={value}\n          index={0}\n          dir={theme.direction}\n        >\n          <div>\n            <List id=\"0101010\">\n              {props.people && props.people.map((item, index) => {\n                if (item){\n\n                  const { userName, id, image } = item;\n                  const labelId = `checkbox-list-secondary-label-${index}`;\n                return (\n                  <ListItem\n                    key={index}\n                    onClick={() => {\n                      props.passHisInfos({\n                        userName: userName,\n                        id: id,\n                        image: image,\n                      });\n                    }}\n                  >\n                    <ListItemAvatar>\n                      <StyledBadge\n                        overlap=\"circle\"\n                        anchorOrigin={{\n                          vertical: \"bottom\",\n                          horizontal: \"right\",\n                        }}\n                        variant=\"dot\"\n                      >\n                        <Avatar\n                          alt={`${userName} picture`}\n                          src={`http://localhost:3001/${image}`}\n                        />\n                      </StyledBadge>\n                    </ListItemAvatar>\n                    <ListItemText id={labelId} primary={userName} />\n                  </ListItem>\n                );\n              }\n              })\n            }\n            </List>\n          </div>\n        </TabPanel>\n      </SwipeableViews>\n    </div>\n  );\n}\n","/Users/anelamra/Desktop/merged/client/src/component/profil/fillProfil.js",[],"/Users/anelamra/Desktop/merged/client/src/component/profil/myAddImages.js",[],"/Users/anelamra/Desktop/merged/client/src/component/browsing/report.js",[],"/Users/anelamra/Desktop/merged/client/src/component/browsing/search.js",[],"/Users/anelamra/Desktop/merged/client/src/component/browsing/profil.js",["201","202","203"],"import React from 'react';\nimport Axios from 'axios'\nimport moment from 'moment'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { withStyles } from '@material-ui/core/styles'\nimport { Chip, Avatar, Grid, Button, Dialog, Typography, IconButton, CardMedia } from '@material-ui/core'\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport {\n  Close as CloseIcon,\n  More as MoreIcon,\n  Block as BlockIcon,\n} from '@material-ui/icons'\nimport 'react-responsive-carousel/lib/styles/carousel.min.css' // requires a loader\nimport { Carousel } from 'react-responsive-carousel'\nimport {  FaFemale ,FaMale  } from \"react-icons/fa\"\nimport Rating from \"react-rating\"\nimport Report from './report'\nimport SocketContext from \"../../start/SocketContext\";\n\nconst styles = (theme) => ({\n    root: {\n        margin: 0,\n        padding: theme.spacing(2),\n        marginLeft: '12vw',\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n});\n\nconst useStyles = makeStyles((theme) => ({\n  media: {\n    height: '40vh',\n  },\n  typo: {\n    marginLeft: '1vw',\n    marginTop: '1vw'\n  },\n  typo1: {\n    marginLeft: '1vw',\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  grid: {\n    margin: theme.spacing(1),\n  }\n}))\n\nconst DialogTitle = withStyles(styles)((props) => {\n  const socket = React.useContext(SocketContext);\n    const { children, classes, onClose, ...other } = props;\n    return (\n        <MuiDialogTitle disableTypography className={classes.root} {...other}>\n            <Typography variant=\"h6\">{children}</Typography>\n            {onClose ? (\n                <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n                    <CloseIcon />\n                </IconButton>\n            ) : null}\n        </MuiDialogTitle>\n    );\n});\n\nconst DialogContent = withStyles((theme) => ({\n    root: {\n        padding: theme.spacing(2),\n    },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme) => ({\n    root: {\n        margin: 0,\n        padding: theme.spacing(1),\n    },\n}))(MuiDialogActions);\n\nconst CustomizedDialogs = (props) => {\n  const socket = React.useContext(SocketContext);\n    const [open, setOpen] = React.useState(false);\n    const [connection, setConnection] = React.useState('');\n    const classes = useStyles()\n\n    const handleClickOpen = (e, visitor, visited) => {\n      setOpen(true);\n      Axios.post(`/browsing/history/${visited}`, {visitor: visitor})\n      // socket visit\n      Axios.post('http://localhost:3001/notifications/saveNotifications', { who: props.visitor, target: props.visited, type: \"visit\" })\n      .then((res) => {\n        console.log('reSdddd000003', res.status);\n      })\n      socket.emit('check_connection', {visitedId : props.visited, visitorId : props.visitor});\n      console.log('who , target', props.visitor, props.visited);\n      socket.emit('new_visit', {who : props.visitor, target : props.visited});\n      \n    };\n    React.useEffect(() => {\n\n      socket.on('receive_connection', (data) => {\n        if(props.visitor == data.visitor)\n        {\n          console.log('//////////', data);\n          setConnection(data.timeAgo)\n        }\n      });\n    }, [connection])\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handelBlock = (e) => {\n      if (props.statusImg)\n        props.setOpen(true)\n      else{\n        Axios.post(`/block/${props.visitor}`, {blocked: props.visited}).then(res => {\n          if (res.data.status){\n            const newList = props.list.filter((item) => item.id !== props.visited)\n            props.setlist(newList)\n          }\n        })\n      }\n    }\n\n    return (\n      <React.Fragment>\n        <div\n          role='button'\n          onClick={(event) =>\n            handleClickOpen(event, props.visitor, props.visited)\n          }\n        >\n          <MoreIcon color='primary' />\n        </div>\n        <Dialog\n          fullWidth\n          maxWidth='sm'\n          onClose={handleClose}\n          aria-labelledby='customized-dialog-title'\n          open={open}\n        >\n          <DialogTitle id='customized-dialog-title' onClose={handleClose}>\n            {props.element.userName}\n          </DialogTitle>\n          <DialogContent>\n            <Grid\n              container\n              justify='center'\n              alignItems='center'\n              direction='column'\n              spacing={2}\n            >\n              <Grid item xs={12} sm={9}>\n                <Carousel autoPlay showThumbs={false}>\n                  {props.element.images.split(',').length > 1\n                    ? props.element.images.split(',').map((el, iKey) => {\n                        let srcImg = `http://localhost:3001/${el}`\n                        let altImg = `display all image loop${iKey}`\n                        return (\n                          <div key={iKey}>\n                            <CardMedia\n                              className={classes.media}\n                              image={srcImg}\n                              title={altImg}\n                            />\n                            <p>{altImg}</p>\n                          </div>\n                        )\n                      })\n                    : ''}\n                </Carousel>\n              </Grid>\n              {connection}\n              <Grid container item xs={8} sm={4}>\n                <props.StyledBadge\n                  overlap='circle'\n                  anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'right',\n                  }}\n                  variant='dot'\n                  status={props.status}\n                >\n                  <Avatar\n                    aria-label='recipe'\n                    src={`http://localhost:3001/${\n                      props.element.images.split(',')[0]\n                    }`}\n                    alt={`test${props.element.images.split(',')[0]}`}\n                  />\n                </props.StyledBadge>\n                {props.curTime && (\n                  <Typography\n                    variant='body2'\n                    display='initial'\n                    className={classes.date}\n                  >\n                    Last Seen {moment(props.curTime).fromNow()}\n                  </Typography>\n                )}\n                <Typography className={classes.typo}>\n                  {'  ' +\n                    props.element.firstName +\n                    ' ' +\n                    props.element.lastName +\n                    ', ' +\n                    props.element.age +\n                    ' '}\n                  {props.element.gender === 'Male' && (\n                    <FaMale style={{ color: 'green' }} />\n                  )}\n                  {props.element.gender === 'Women' && (\n                    <FaFemale style={{ color: 'pink' }} />\n                  )}\n                </Typography>\n                <Typography className={classes.typo1} variant='body2'>\n                  {props.element.city +\n                    ' | ' +\n                    props.element.km.toFixed(2) +\n                    '  km'}\n                </Typography>\n              </Grid>\n              <Grid container item xs={8} sm={4}>\n                {props.element.tag2 && props.element.tag2.split(',').length > 0\n                  ? props.element.tag2.split(',').map((el, iKey) => {\n                      return (\n                        <div key={iKey}>\n                          <Chip\n                            color='primary'\n                            variant='outlined'\n                            size='small'\n                            label={el}\n                          />\n                        </div>\n                      )\n                    })\n                  : ''}\n                <Grid container className={classes.grid}>\n                  <Typography>\n                    tag in common :\n                  </Typography>\n                </Grid>\n                {props.element.tag1 && props.element.tag1.split(',').length > 0\n                  ? props.element.tag1.split(',').map((el, iKey) => {\n                      return (\n                        <div key={iKey}>\n                          <Chip\n                            color='secondary'\n                            variant='outlined'\n                            size='small'\n                            label={el}\n                          />\n                        </div>\n                      )\n                    })\n                    :  <Typography color='secondary' variant='caption'>\n                        {'Nothing to in common'}\n                      </Typography>}\n              </Grid>\n              <Grid item xs={8} sm={4}>\n                <Typography color='primary' variant='caption'>\n                  {props.element.bio}\n                </Typography>\n              </Grid>\n              <Grid item xs={8} sm={4}>\n                {0 < props.element.fameRating && props.element.fameRating < 50 && (\n                  <Typography style={{ color: 'Gold' }} variant='caption'>\n                    <Rating\n                      style={{ pointerEvents: 'none' }}\n                      initialRating={1}\n                    />\n                    <br />\n                    {props.element.fameRating + ' exp Useless'}\n                  </Typography>\n                )}\n                {50 < props.element.fameRating &&\n                  props.element.fameRating < 150 && (\n                    <Typography style={{ color: 'Gold' }} variant='caption'>\n                      <Rating\n                        style={{ pointerEvents: 'none' }}\n                        initialRating={1}\n                      />\n                      <br />\n                      {props.element.fameRating + ' exp Useless+'}\n                    </Typography>\n                  )}\n                {150 < props.element.fameRating &&\n                  props.element.fameRating < 250 && (\n                    <Typography style={{ color: 'Gold' }} variant='caption'>\n                      <Rating\n                        style={{ pointerEvents: 'none' }}\n                        initialRating={2}\n                      />\n                      <br />\n                      {props.element.fameRating + ' exp Poor'}\n                    </Typography>\n                  )}\n                {250 < props.element.fameRating &&\n                  props.element.fameRating < 350 && (\n                    <Typography style={{ color: 'Gold' }} variant='caption'>\n                      <Rating\n                        style={{ pointerEvents: 'none' }}\n                        initialRating={2}\n                      />\n                      <br />\n                      {props.element.fameRating + ' exp Poor+'}\n                    </Typography>\n                  )}\n                {350 < props.element.fameRating &&\n                  props.element.fameRating < 450 && (\n                    <Typography style={{ color: 'Gold' }} variant='caption'>\n                      <Rating\n                        style={{ pointerEvents: 'none' }}\n                        initialRating={3}\n                      />\n                      <br />\n                      {props.element.fameRating + ' exp Ok'}\n                    </Typography>\n                  )}\n                {450 < props.element.fameRating &&\n                  props.element.fameRating < 550 && (\n                    <Typography style={{ color: 'Gold' }} variant='caption'>\n                      <Rating\n                        style={{ pointerEvents: 'none' }}\n                        initialRating={3}\n                      />\n                      <br />\n                      {props.element.fameRating + ' exp Ok+'}\n                    </Typography>\n                  )}\n                {550 < props.element.fameRating &&\n                  props.element.fameRating < 650 && (\n                    <Typography style={{ color: 'Gold' }} variant='caption'>\n                      <Rating\n                        style={{ pointerEvents: 'none' }}\n                        initialRating={4}\n                      />\n                      <br />\n                      {props.element.fameRating + ' exp Good'}\n                    </Typography>\n                  )}\n                {650 < props.element.fameRating &&\n                  props.element.fameRating < 750 && (\n                    <Typography style={{ color: 'Gold' }} variant='caption'>\n                      <Rating\n                        style={{ pointerEvents: 'none' }}\n                        initialRating={4}\n                      />\n                      <br />\n                      {props.element.fameRating + ' exp Good+'}\n                    </Typography>\n                  )}\n                {750 < props.element.fameRating &&\n                  props.element.fameRating < 850 && (\n                    <Typography style={{ color: 'Gold' }} variant='caption'>\n                      <Rating\n                        style={{ pointerEvents: 'none' }}\n                        initialRating={5}\n                      />\n                      <br />\n                      {props.element.fameRating + ' exp Excellent'}\n                    </Typography>\n                  )}\n                {850 < props.element.fameRating &&\n                  props.element.fameRating < 1001 && (\n                    <Typography style={{ color: 'Gold' }} variant='caption'>\n                      <Rating\n                        style={{ pointerEvents: 'none' }}\n                        initialRating={5}\n                      />\n                      <br />\n                      {props.element.fameRating + ' exp Excellent+'}\n                    </Typography>\n                  )}\n              </Grid>\n              <Grid container item xs={8} sm={4} direction='row'>\n                <IconButton\n                  aria-label='Block User'\n                  onClick={(event) => handelBlock(event)}\n                >\n                  <BlockIcon />\n                </IconButton>\n                <Report visitor={props.visitor} visited={props.visited} statusImg={props.statusImg} setOpen={props.setOpen} />\n              </Grid>\n            </Grid>\n          </DialogContent>\n          <DialogActions>\n            <Button autoFocus onClick={handleClose} color='primary'>\n              Done\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </React.Fragment>\n    )\n}\n\nexport default CustomizedDialogs","/Users/anelamra/Desktop/merged/client/src/component/browsing/map.js",[],"/Users/anelamra/Desktop/merged/client/src/component/browsing/sort.js",[],"/Users/anelamra/Desktop/merged/client/src/component/browsing/filter.js",[],"/Users/anelamra/Desktop/merged/client/src/component/profil/profil.js",[],"/Users/anelamra/Desktop/merged/client/src/component/forget/editPassword.js",[],"/Users/anelamra/Desktop/merged/client/src/component/profil/geo.js",[],{"ruleId":"204","replacedBy":"205"},{"ruleId":"206","replacedBy":"207"},{"ruleId":"208","severity":1,"message":"209","line":56,"column":9,"nodeType":"210","messageId":"211","endLine":56,"endColumn":14},{"ruleId":"212","severity":1,"message":"213","line":100,"column":6,"nodeType":"214","endLine":100,"endColumn":19,"suggestions":"215"},{"ruleId":"212","severity":1,"message":"216","line":129,"column":6,"nodeType":"214","endLine":129,"endColumn":10,"suggestions":"217"},{"ruleId":"218","severity":1,"message":"219","line":229,"column":16,"nodeType":"220","messageId":"221","endLine":229,"endColumn":18},{"ruleId":"212","severity":1,"message":"222","line":91,"column":6,"nodeType":"214","endLine":91,"endColumn":16,"suggestions":"223"},{"ruleId":"224","severity":1,"message":"225","line":105,"column":35,"nodeType":"226","endLine":105,"endColumn":48},{"ruleId":"218","severity":1,"message":"219","line":148,"column":33,"nodeType":"220","messageId":"221","endLine":148,"endColumn":35},{"ruleId":"218","severity":1,"message":"219","line":154,"column":37,"nodeType":"220","messageId":"221","endLine":154,"endColumn":39},{"ruleId":"208","severity":1,"message":"227","line":7,"column":8,"nodeType":"210","messageId":"211","endLine":7,"endColumn":16},{"ruleId":"208","severity":1,"message":"228","line":17,"column":22,"nodeType":"210","messageId":"211","endLine":17,"endColumn":32},{"ruleId":"218","severity":1,"message":"219","line":71,"column":48,"nodeType":"220","messageId":"221","endLine":71,"endColumn":50},{"ruleId":"229","severity":1,"message":"230","line":134,"column":52,"nodeType":"231","messageId":"232","endLine":134,"endColumn":54},{"ruleId":"218","severity":1,"message":"233","line":135,"column":45,"nodeType":"220","messageId":"221","endLine":135,"endColumn":47},{"ruleId":"218","severity":1,"message":"219","line":146,"column":65,"nodeType":"220","messageId":"221","endLine":146,"endColumn":67},{"ruleId":"218","severity":1,"message":"219","line":148,"column":69,"nodeType":"220","messageId":"221","endLine":148,"endColumn":71},{"ruleId":"218","severity":1,"message":"219","line":150,"column":73,"nodeType":"220","messageId":"221","endLine":150,"endColumn":75},{"ruleId":"218","severity":1,"message":"219","line":152,"column":77,"nodeType":"220","messageId":"221","endLine":152,"endColumn":79},{"ruleId":"208","severity":1,"message":"234","line":8,"column":8,"nodeType":"210","messageId":"211","endLine":8,"endColumn":25},{"ruleId":"208","severity":1,"message":"228","line":17,"column":22,"nodeType":"210","messageId":"211","endLine":17,"endColumn":32},{"ruleId":"218","severity":1,"message":"219","line":71,"column":48,"nodeType":"220","messageId":"221","endLine":71,"endColumn":50},{"ruleId":"212","severity":1,"message":"235","line":95,"column":8,"nodeType":"214","endLine":95,"endColumn":10,"suggestions":"236"},{"ruleId":"229","severity":1,"message":"230","line":121,"column":55,"nodeType":"231","messageId":"232","endLine":121,"endColumn":57},{"ruleId":"218","severity":1,"message":"219","line":122,"column":45,"nodeType":"220","messageId":"221","endLine":122,"endColumn":47},{"ruleId":"218","severity":1,"message":"219","line":126,"column":29,"nodeType":"220","messageId":"221","endLine":126,"endColumn":31},{"ruleId":"208","severity":1,"message":"237","line":8,"column":13,"nodeType":"210","messageId":"211","endLine":8,"endColumn":23},{"ruleId":"208","severity":1,"message":"238","line":65,"column":10,"nodeType":"210","messageId":"211","endLine":65,"endColumn":14},{"ruleId":"208","severity":1,"message":"239","line":65,"column":16,"nodeType":"210","messageId":"211","endLine":65,"endColumn":23},{"ruleId":"218","severity":1,"message":"233","line":78,"column":40,"nodeType":"220","messageId":"221","endLine":78,"endColumn":42},{"ruleId":"212","severity":1,"message":"213","line":147,"column":6,"nodeType":"214","endLine":147,"endColumn":8,"suggestions":"240"},{"ruleId":"218","severity":1,"message":"233","line":221,"column":34,"nodeType":"220","messageId":"221","endLine":221,"endColumn":36},{"ruleId":"218","severity":1,"message":"219","line":223,"column":37,"nodeType":"220","messageId":"221","endLine":223,"endColumn":39},{"ruleId":"208","severity":1,"message":"241","line":4,"column":10,"nodeType":"210","messageId":"211","endLine":4,"endColumn":24},{"ruleId":"208","severity":1,"message":"242","line":7,"column":10,"nodeType":"210","messageId":"211","endLine":7,"endColumn":14},{"ruleId":"208","severity":1,"message":"243","line":7,"column":35,"nodeType":"210","messageId":"211","endLine":7,"endColumn":40},{"ruleId":"208","severity":1,"message":"244","line":7,"column":58,"nodeType":"210","messageId":"211","endLine":7,"endColumn":81},{"ruleId":"208","severity":1,"message":"245","line":7,"column":113,"nodeType":"210","messageId":"211","endLine":7,"endColumn":121},{"ruleId":"208","severity":1,"message":"246","line":7,"column":138,"nodeType":"210","messageId":"211","endLine":7,"endColumn":144},{"ruleId":"229","severity":1,"message":"230","line":126,"column":63,"nodeType":"231","messageId":"232","endLine":126,"endColumn":65},{"ruleId":"208","severity":1,"message":"247","line":60,"column":9,"nodeType":"210","messageId":"211","endLine":60,"endColumn":15},{"ruleId":"218","severity":1,"message":"219","line":109,"column":26,"nodeType":"220","messageId":"221","endLine":109,"endColumn":28},{"ruleId":"212","severity":1,"message":"248","line":115,"column":8,"nodeType":"214","endLine":115,"endColumn":20,"suggestions":"249"},"no-native-reassign",["250"],"no-negated-in-lhs",["251"],"no-unused-vars","'theme' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.","ArrayExpression",["252"],"React Hook React.useEffect has a missing dependency: 'saveMyInfos'. Either include it or remove the dependency array.",["253"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook React.useEffect has missing dependencies: 'props.id' and 'saveMyInfos'. Either include them or remove the dependency array.",["254"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'MailIcon' is defined but never used.","'withStyles' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Expected '!==' and instead saw '!='.","'NotificationsIcon' is defined but never used.","React Hook React.useEffect has missing dependencies: 'messageNumber', 'props.myInfos.id', and 'socket'. Either include them or remove the dependency array.",["255"],"'UpdateIcon' is defined but never used.","'list' is assigned a value but never used.","'setList' is assigned a value but never used.",["256"],"'StylesProvider' is defined but never used.","'Grid' is defined but never used.","'Paper' is defined but never used.","'ListItemSecondaryAction' is defined but never used.","'Checkbox' is defined but never used.","'Hidden' is defined but never used.","'socket' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'props.visitor' and 'socket'. Either include them or remove the dependency array.",["257"],"no-global-assign","no-unsafe-negation",{"desc":"258","fix":"259"},{"desc":"260","fix":"261"},{"desc":"262","fix":"263"},{"desc":"264","fix":"265"},{"desc":"266","fix":"267"},{"desc":"268","fix":"269"},"Update the dependencies array to be: [userInf, id, socket]",{"range":"270","text":"271"},"Update the dependencies array to be: [id, saveMyInfos]",{"range":"272","text":"273"},"Update the dependencies array to be: [props.id, saveMyInfos, stopLoop]",{"range":"274","text":"275"},"Update the dependencies array to be: [messageNumber, props.myInfos.id, socket]",{"range":"276","text":"277"},"Update the dependencies array to be: [socket]",{"range":"278","text":"279"},"Update the dependencies array to be: [connection, props.visitor, socket]",{"range":"280","text":"281"},[2669,2682],"[userInf, id, socket]",[3281,3285],"[id, saveMyInfos]",[2251,2261],"[props.id, saveMyInfos, stopLoop]",[2868,2870],"[messageNumber, props.myInfos.id, socket]",[3655,3657],"[socket]",[3544,3556],"[connection, props.visitor, socket]"]
[{"/Users/anelamra/Desktop/matcha/client/src/index.js":"1","/Users/anelamra/Desktop/matcha/client/src/App.js":"2","/Users/anelamra/Desktop/matcha/client/src/start/theme.js":"3","/Users/anelamra/Desktop/matcha/client/src/history/history.js":"4","/Users/anelamra/Desktop/matcha/client/src/start/init.js":"5","/Users/anelamra/Desktop/matcha/client/src/start/SocketContext.js":"6","/Users/anelamra/Desktop/matcha/client/src/component/auth/Sign-in.js":"7","/Users/anelamra/Desktop/matcha/client/src/component/forget/sendForget.js":"8","/Users/anelamra/Desktop/matcha/client/src/component/auth/Login.js":"9","/Users/anelamra/Desktop/matcha/client/src/component/forget/forget.js":"10","/Users/anelamra/Desktop/matcha/client/src/component/auth/Valid.js":"11","/Users/anelamra/Desktop/matcha/client/src/component/layout/res/ResponsiveDrawer.js":"12","/Users/anelamra/Desktop/matcha/client/src/start/IntraSvg.js":"13","/Users/anelamra/Desktop/matcha/client/src/component/helpers/size.js":"14","/Users/anelamra/Desktop/matcha/client/src/component/browsing/browsing.js":"15","/Users/anelamra/Desktop/matcha/client/src/component/chat/Chat.js":"16","/Users/anelamra/Desktop/matcha/client/src/component/profil/editProfill.js":"17","/Users/anelamra/Desktop/matcha/client/src/component/profil/Home.js":"18","/Users/anelamra/Desktop/matcha/client/src/component/profil/setting.js":"19","/Users/anelamra/Desktop/matcha/client/src/component/allProfil/likeProfil.js":"20","/Users/anelamra/Desktop/matcha/client/src/component/Notifications/Notifications.js":"21","/Users/anelamra/Desktop/matcha/client/src/component/history/history.js":"22","/Users/anelamra/Desktop/matcha/client/src/component/browsing/sort.js":"23","/Users/anelamra/Desktop/matcha/client/src/component/browsing/profil.js":"24","/Users/anelamra/Desktop/matcha/client/src/component/browsing/map.js":"25","/Users/anelamra/Desktop/matcha/client/src/component/browsing/filter.js":"26","/Users/anelamra/Desktop/matcha/client/src/component/browsing/search.js":"27","/Users/anelamra/Desktop/matcha/client/src/component/chat/ChatBox.js":"28","/Users/anelamra/Desktop/matcha/client/src/component/chat/LeftSection.js":"29","/Users/anelamra/Desktop/matcha/client/src/component/profil/geo.js":"30","/Users/anelamra/Desktop/matcha/client/src/component/forget/editPassword.js":"31","/Users/anelamra/Desktop/matcha/client/src/component/browsing/report.js":"32","/Users/anelamra/Desktop/matcha/client/src/component/profil/myAddImages.js":"33","/Users/anelamra/Desktop/matcha/client/src/component/profil/fillProfil.js":"34","/Users/anelamra/Desktop/matcha/client/src/component/profil/alertDialog.js":"35","/Users/anelamra/Desktop/matcha/client/src/component/Notifications/messageNotification.js":"36","/Users/anelamra/Desktop/matcha/client/src/component/Notifications/MessageNotification.js":"37"},{"size":663,"mtime":1615880601000,"results":"38","hashOfConfig":"39"},{"size":248,"mtime":1615880601000,"results":"40","hashOfConfig":"39"},{"size":141,"mtime":1615880601000,"results":"41","hashOfConfig":"39"},{"size":87,"mtime":1615880601000,"results":"42","hashOfConfig":"39"},{"size":2401,"mtime":1615880601000,"results":"43","hashOfConfig":"39"},{"size":103,"mtime":1615880601000,"results":"44","hashOfConfig":"39"},{"size":11661,"mtime":1615880601000,"results":"45","hashOfConfig":"39"},{"size":3257,"mtime":1615880601000,"results":"46","hashOfConfig":"39"},{"size":11000,"mtime":1615880601000,"results":"47","hashOfConfig":"39"},{"size":3362,"mtime":1615880601000,"results":"48","hashOfConfig":"39"},{"size":954,"mtime":1615880601000,"results":"49","hashOfConfig":"39"},{"size":12108,"mtime":1615906717000,"results":"50","hashOfConfig":"39"},{"size":6687,"mtime":1615880601000,"results":"51","hashOfConfig":"39"},{"size":399,"mtime":1615880601000,"results":"52","hashOfConfig":"39"},{"size":11075,"mtime":1615918170000,"results":"53","hashOfConfig":"39"},{"size":3007,"mtime":1615880601000,"results":"54","hashOfConfig":"39"},{"size":14972,"mtime":1615880601000,"results":"55","hashOfConfig":"39"},{"size":5367,"mtime":1615880601000,"results":"56","hashOfConfig":"39"},{"size":147,"mtime":1615880601000,"results":"57","hashOfConfig":"39"},{"size":15826,"mtime":1615884432000,"results":"58","hashOfConfig":"39"},{"size":6657,"mtime":1615891658000,"results":"59","hashOfConfig":"39"},{"size":1466,"mtime":1615880601000,"results":"60","hashOfConfig":"39"},{"size":1193,"mtime":1615880601000,"results":"61","hashOfConfig":"39"},{"size":13327,"mtime":1615882494000,"results":"62","hashOfConfig":"39"},{"size":3986,"mtime":1615880601000,"results":"63","hashOfConfig":"39"},{"size":2646,"mtime":1615880601000,"results":"64","hashOfConfig":"39"},{"size":6066,"mtime":1615880601000,"results":"65","hashOfConfig":"39"},{"size":6580,"mtime":1615914323000,"results":"66","hashOfConfig":"39"},{"size":4481,"mtime":1615880601000,"results":"67","hashOfConfig":"39"},{"size":3938,"mtime":1615880601000,"results":"68","hashOfConfig":"39"},{"size":4664,"mtime":1615880601000,"results":"69","hashOfConfig":"39"},{"size":2534,"mtime":1615880601000,"results":"70","hashOfConfig":"39"},{"size":11121,"mtime":1615880601000,"results":"71","hashOfConfig":"39"},{"size":12007,"mtime":1615880601000,"results":"72","hashOfConfig":"39"},{"size":1265,"mtime":1615880601000,"results":"73","hashOfConfig":"39"},{"size":6307,"mtime":1615888838000,"results":"74","hashOfConfig":"39"},{"size":6300,"mtime":1615892144000,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"60t8g0",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"78"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"78"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"78"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"78"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"78"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"78"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"78"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"78"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"78"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"78"},"/Users/anelamra/Desktop/matcha/client/src/index.js",[],["161","162"],"/Users/anelamra/Desktop/matcha/client/src/App.js",[],"/Users/anelamra/Desktop/matcha/client/src/start/theme.js",[],"/Users/anelamra/Desktop/matcha/client/src/history/history.js",[],"/Users/anelamra/Desktop/matcha/client/src/start/init.js",[],"/Users/anelamra/Desktop/matcha/client/src/start/SocketContext.js",[],"/Users/anelamra/Desktop/matcha/client/src/component/auth/Sign-in.js",[],"/Users/anelamra/Desktop/matcha/client/src/component/forget/sendForget.js",[],"/Users/anelamra/Desktop/matcha/client/src/component/auth/Login.js",[],"/Users/anelamra/Desktop/matcha/client/src/component/forget/forget.js",[],"/Users/anelamra/Desktop/matcha/client/src/component/auth/Valid.js",[],"/Users/anelamra/Desktop/matcha/client/src/component/layout/res/ResponsiveDrawer.js",["163","164","165"],"import React from \"react\"\nimport Axios from \"axios\"\nimport { withRouter, Switch, Route } from \"react-router-dom\"\nimport PropTypes from \"prop-types\"\nimport \"../../../start/styles.css\"\nimport {\n  Typography,\n  Toolbar,\n  AppBar,\n  CssBaseline,\n  Divider,\n  List,\n  IconButton,\n  Hidden,\n  Drawer,\n  ListItemText,\n  ListItemIcon,\n  ListItem,\n  // Badge\n} from \"@material-ui/core\"\nimport {\n  Menu as MenuIcon,\n  // LocationOn\n} from \"@material-ui/icons\"\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\"\nimport { FaHome, FaHistory, FaHotjar, FaRegSun, FaUsers } from \"react-icons/fa\"\nimport { RiLogoutCircleLine } from \"react-icons/ri\"\nimport { AiFillMessage } from 'react-icons/ai'\n// import MailIcon from '@material-ui/icons/Mail';\n// import NotificationsIcon from '@material-ui/icons/Notifications';\nimport Badge from '@material-ui/core/Badge';\nimport Chat from '../../chat/Chat'\nimport Browsing from '../../browsing/browsing'\nimport Home from \"../../profil/Home\"\nimport EditProfil from \"../../profil/editProfill\"\nimport Setting from \"../../profil/setting\"\nimport History from \"../../history/history\"\nimport AllProfil from \"../../allProfil/likeProfil\"\nimport SocketContext from \"../../../start/SocketContext\";\nimport Notifications from \"../../Notifications/Notifications\";\nimport MessageNotification from \"../../Notifications/MessageNotification\";\n// import { set } from \"date-fns\"\n\nconst instance = Axios.create({ withCredentials: true });\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    display: \"flex\",\n  },\n  ty: {\n    flexGrow: 1,\n    fontFamily: \"Comfortaa\",\n  },\n  drawer: {\n    [theme.breakpoints.up(\"sm\")]: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n  },\n  appBar: {\n    [theme.breakpoints.up(\"sm\")]: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n    },\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"none\",\n    },\n  },\n  // necessary for content to be below app bar\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\n// anass part :\n// notification\n\n///////////////////////////////// Big steps ///////////////////////////////////////////////////////////\n// un utilisateur qui ne possede pas de photo ne doit pas pouvoir liker le profil d'une auter utilisateur\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n/////////////////////////// try to do /////////////////////////////////////////////////////////////////\n// print images in drop so that can help to delete them\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n// implimantation active users .............................///////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n// check all route with post man //////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////// tag error man ba3d .... //////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\nconst ResponsiveDrawer = (props) => {\n  const { history, window } = props\n  const classes = useStyles()\n  const theme = useTheme()\n  const [mobileOpen, setMobileOpen] = React.useState(false)\n  const [id, setId] = React.useState(0)\n  const [lat, setLat] = React.useState(false)\n  const [long, setLong] = React.useState(false)\n  const [requiredProfilInfo, setRPI] = React.useState('')\n  const [didMount, setDidMount] = React.useState(false)\n  const socket = React.useContext(SocketContext);\n  //\n  const [userInf, setUserInf] = React.useState({});\n  // const [messageNumber, SetmessageNumber] = React.useState(0);\n  // const [notifNumber, SetNotifNumber] = React.useState(0);\n\n\n  React.useEffect(() => {\n    socket.emit('join', { key: userInf.id });\n  }, [userInf, id])\n\n  function isEmpty(obj) {\n    for (var prop in obj) {\n      if (obj.hasOwnProperty(prop)) {\n        return false;\n      }\n    }\n\n    return true\n  }\n\n  const saveMyInfos = (value) => {\n    if (isEmpty(userInf) === true)\n      setUserInf(value);\n  }\n  console.log('3333333', userInf)\n  React.useEffect(() => {\n    if (id) {\n\n      Axios.post('http://localhost:3001/chat/getConnectedUserInfos', { userId: id })\n        .then((res) => {\n          // if(!MyInfos)\n          if (res) {\n            saveMyInfos(res.data.myInfos);\n          }\n\n        }).catch((err) => { console.log(err) })\n    }\n  }, [id])\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////\n  function success(pos) {\n    setLat(pos.coords.latitude)\n    setLong(pos.coords.longitude)\n    if (id1) navigator.geolocation.clearWatch(id1)\n  }\n\n  const options = {\n    enableHighAccuracy: false,\n    timeout: 5000,\n    maximumAge: 0,\n  }\n\n  let id1 = navigator.geolocation.getCurrentPosition(success, () => { }, options)\n\n  const func = React.useCallback(async () => {\n    if (!didMount) {\n      const CancelToken = Axios.CancelToken\n      const source = CancelToken.source()\n      let { data } = await instance.get('http://localhost:3001/base', {\n        cancelToken: source.token,\n      })\n      setId(data.user.id)\n      return () => {\n        if (source) source.cancel('test')\n      }\n    }\n  }, [didMount])\n\n  React.useEffect(() => {\n    func()\n    if (id !== 0) {\n      instance\n        .post('http://localhost:3001/user/userInfoVerification', { userId: id })\n        .then((res) => {\n          if (res.data.status === true) {\n            setRPI(true)\n          } else setRPI(false)\n        })\n    }\n    setDidMount(true)\n    return () => {\n      setDidMount(false)\n    }\n  }, [func, props, id])\n\n  const getLocIp = React.useCallback(() => {\n    // get locallization with help of ip\n    Axios.get('https://api.ipify.org?format=json').then(async (res) => {\n      await Axios.get(`http://ip-api.com/json/${res.data.ip}`).then((res) => {\n        setLat(res.data.lat)\n        setLong(res.data.lon)\n      })\n      if (id) Axios.post(`base/localisation/${id}`, { lat: lat, long: long })\n    })\n  }, [id, lat, long])\n\n  React.useEffect(() => {\n    // tal l push\n    // if (lat === false && long === false)\n    //   getLocIp()\n  }, [lat, long, getLocIp])\n\n  React.useEffect(() => {\n    if (lat !== false && long !== false && id)\n      Axios.post(`base/localisation/${id}`, { lat: lat, long: long })\n\n    setDidMount(true)\n    return () => {\n      setDidMount(false)\n    }\n  }, [id, lat, long])\n\n  const handelLogout = () => {\n    instance.post('http://localhost:3001/logout')\n    if(id)\n      socket.emit('Firedisconnect', {id : id})\n    // socket.close();\n    props.logout()\n  }\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen)\n  }\n\n  const itemsListOne = [\n    {\n      id: 0,\n      text: 'Home',\n      icon: <FaHome />,\n      onClick: () => history.push('/'),\n      hidden: true,\n      disabled: requiredProfilInfo,\n    },\n    {\n      id: 1,\n      text: 'browsing',\n      icon: <FaHotjar />,\n      onClick: () => history.push(`/browsing/${id}`),\n      disabled: !requiredProfilInfo,\n    },\n    {\n      id: 3,\n      text: 'Setting',\n      icon: <FaRegSun />,\n      onClick: () => history.push(`/edit/${id}`),\n      disabled: !requiredProfilInfo,\n    },\n    {\n      id: 4,\n      text: 'History',\n      icon: <FaHistory />,\n      onClick: () => history.push(`/history/${id}`),\n      disabled: !requiredProfilInfo,\n    },\n    {\n      id: 5,\n      text: 'Profil',\n      icon: <FaUsers />,\n      onClick: () => history.push('/allProfil'),\n      disabled: !requiredProfilInfo,\n    },\n    {\n      id: 6,\n      text: 'Chat',\n      icon: <AiFillMessage />,\n      onClick: () => history.push('/chat'),\n      disabled: !requiredProfilInfo,\n    },\n  ]\n  const itemsListTwo = [\n    {\n      id: 100,\n      text: 'Logout',\n      icon: <RiLogoutCircleLine />,\n      onClick: () => {\n        handelLogout()\n      },\n    },\n  ]\n  const drawer = (\n    <div>\n      <div className={classes.toolbar} />\n      <Divider />\n      <List key={Math.random()}>\n        {itemsListOne.map((item, index) => {\n          const { id, text, icon, onClick, disabled, hidden } = item\n          if (!hidden) {\n            return (\n              <ListItem button key={id} disabled={disabled} onClick={onClick}>\n                <ListItemText key={id + Math.random()} primary={text} />\n                {icon && <ListItemIcon>{icon}</ListItemIcon>}\n              </ListItem>\n            )\n          }\n          return <React.Fragment key={Math.random()}></React.Fragment>\n        })}\n      </List>\n      <Divider />\n      <List key={Math.random()}>\n        {itemsListTwo.map((item, index) => {\n          const { id, text, icon, onClick } = item\n          return (\n            <ListItem button key={id} onClick={onClick}>\n              <ListItemText key={id + Math.random()} primary={text} />\n              {icon && <ListItemIcon>{icon}</ListItemIcon>}\n            </ListItem>\n          )\n        })}\n      </List>\n    </div>\n  )\n\n  const container =\n    window !== undefined ? () => window().document.body : undefined\n\n  if (!didMount) {\n    return null\n  }\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position='fixed' className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            color='secondary'\n            aria-label='open drawer'\n            edge='start'\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography className={classes.ty} variant='h6' noWrap>\n            Matcha\n          </Typography>\n          <MessageNotification myInfos={userInf} />\n          <Notifications myInfos={userInf} />\n        </Toolbar>\n      </AppBar>\n      <nav className={classes.drawer} aria-label='mailbox folders'>\n        <Hidden smUp implementation='css'>\n          <Drawer\n            container={container}\n            variant='temporary'\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            ModalProps={{\n              keepMounted: true,\n            }}\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n        <Hidden xsDown implementation='css'>\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            variant='permanent'\n            open\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <Switch>\n          <Route\n            exact\n            path='/edit/:id'\n            render={(props) => <EditProfil id={id} />}\n          />\n          <Route exact path='/chat' render={(props) => <Chat id={id} />} />\n          <Route\n            exact\n            path='/browsing/:id'\n            render={(props) => <Browsing id={id} />}\n          />\n          <Route exact path='/history/:id' component={History} />\n          <Route\n            exact\n            path='/setting'\n            component={(props) => <Setting id={id} />}\n          />\n          <Route\n            exact\n            path='/allProfil'\n            component={(props) => <AllProfil id={id} />}\n          />\n          {requiredProfilInfo === true ? (\n            <Route exact path='/' render={(props) => <Browsing id={id}  myInfos={userInf} />} />\n          ) : (\n              <Route exact path='/*' render={(props) => <Home id={id} />} />\n            )}\n        </Switch>\n      </main>\n    </div>\n  )\n};\n\nResponsiveDrawer.propTypes = {\n  window: PropTypes.func,\n};\n\nexport default withRouter(ResponsiveDrawer);\n","/Users/anelamra/Desktop/matcha/client/src/start/IntraSvg.js",[],"/Users/anelamra/Desktop/matcha/client/src/component/helpers/size.js",[],"/Users/anelamra/Desktop/matcha/client/src/component/browsing/browsing.js",["166","167","168"],"/Users/anelamra/Desktop/matcha/client/src/component/chat/Chat.js",["169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186"],"import React from \"react\";\nimport Axios from \"axios\";\nimport ChatBox from \"./ChatBox\";\nimport { Grid, Tabs, Tab, AppBar, Paper, List, ListItem, ListItemSecondaryAction, ListItemText, ListItemAvatar, Checkbox, Avatar, Badge, Hidden } from '@material-ui/core';\nimport { makeStyles, withStyles } from '@material-ui/core';\nimport { StylesProvider } from \"@material-ui/core/styles\";\nimport FullWidthTabs from \"./LeftSection\";\nimport \"./LeftSectionStyle.css\";\n\n// we have to get id of connected user & email of user to cha with;\n// ids will make the room's name\n\nconst StyledBadge = withStyles((theme) => ({\n  badge: {\n    backgroundColor: '#44b700',\n    color: '#44b700',\n    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\n    '&::after': {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      borderRadius: '50%',\n      animation: '$ripple 1.2s infinite ease-in-out',\n      border: '1px solid currentColor',\n      content: '\"\"',\n    },\n  },\n  '@keyframes ripple': {\n    '0%': {\n      transform: 'scale(.8)',\n      opacity: 1,\n    },\n    '100%': {\n      transform: 'scale(2.4)',\n      opacity: 0,\n    },\n  },\n}))(Badge);\n\nconst ChatList = (props) => {\n\n  const [people, setPeople] = React.useState([]);\n  const [hisInfos, setHisInfos] = React.useState({});\n  const [myInfos, setMyInfos] = React.useState({});\n  const [stopLoop, xx] = React.useState('');\n\n  function isEmpty(obj) {\n    for (var prop in obj) {\n      if (obj.hasOwnProperty(prop)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  const saveMyInfos = (value) => {\n    if (isEmpty != false)\n      setMyInfos(value);\n  }\n  const passHisInfos = (x) => {\n    setHisInfos(x);\n  }\n\n  // getting people matched with (id, userName, profilPicture);\n\n  React.useEffect(() => {\n    Axios.post('http://localhost:3001/chat/getConnectedUserInfos', { userId: props.id })\n      .then((res) => {\n        // if(!MyInfos)\n        if (res) {\n          saveMyInfos(res.data.myInfos);\n        }\n\n      }).catch((err) => { console.log(err) })\n\n    Axios.post('http://localhost:3001/chat/people', { userId: props.id })\n      .then((res) => {\n        if (res.data.boards) {\n          var result = res.data.boards\n          console.log('boards', result);\n          console.log('...boards', ...result);\n          setPeople([...result]);\n\n        }\n      }).catch((err) => { console.log(err) })\n    //\n\n  }, [stopLoop])\n\n  // console.log(\"*******\", hisInfos);\n\n  return (\n    <StylesProvider injectFirst>\n      <div>\n        <Grid container spacing={1} style={{ background: '#EEEEEE', height: '70vh' }}>\n          <Grid item md={3}>\n            <FullWidthTabs people={people} passHisInfos={passHisInfos} />\n\n          </Grid>\n          <Grid item md={9}>\n            <ChatBox\n              id={props.id}\n              myInfos={myInfos}\n              hisInfos={hisInfos} id={props.id}\n            />\n          </Grid>\n        </Grid>\n      </div>\n    </StylesProvider>\n  )\n}\n\nexport default ChatList;","/Users/anelamra/Desktop/matcha/client/src/component/profil/editProfill.js",[],"/Users/anelamra/Desktop/matcha/client/src/component/profil/Home.js",["187","188","189"],"import React  from \"react\"\nimport Axios from 'axios'\nimport { CircularProgress, Stepper, Step, StepLabel, Button, Typography } from \"@material-ui/core\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport FillProfil from './fillProfil'\nimport MyAddImages from './myAddImages'\nimport history from '../../history/history'\n\n\n\n// const triggerInput = (index) => {\n//   // console.log(printImages.split(',').length <= index)\n//   // if (printImages.split(',').length <= index) {\n//   //   console.log(\"test\")\n//   // }\n//   if (imageRefs.current[index]) {\n//     imageRefs.current[index].click()\n//   }\n// }\n\n\n\n{/* (printImages.split(',').length > index) || (imageRefs.current[index].id) ? <IoIosRemoveCircleOutline className={classes.addCircle} onClick={(event) => handelRemoveImg(event, index)} /> */ }\n{/* <IoMdAddCircle className={classes.addCircle} /> */}\n{/* {printImages.split(',').length <= index ? <IoMdAddCircle className={classes.addCircle} /> : <IoIosRemoveCircleOutline className={classes.addCircle} onClick={(event) => handelRemoveImg(event, index)} />} */ }\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\"\n  },\n  button: {\n    marginRight: theme.spacing(1)\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  }\n}));\n\nfunction getSteps() {\n  return [\"Add Images\", \"Fill Profile Informations\"];\n}\n\nfunction getStepContent(step, props, checkTI, checkNo) {\n  switch (step) {\n    case 0:\n      return (\n        <MyAddImages id={props.id} checkTotalImg={checkTI} />\n      )\n    case 1:\n      return (\n        <FillProfil id={props.id} checkTotalImg={checkTI} checkFill={checkNo} />\n      )\n    default:\n      return 'Unknown step'\n  }\n}\n\nconst HorizontalLinearStepper = (props) => {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const steps = getSteps();\n  const [stepOneFilled, setStepOneFilled] = React.useState('no')\n  // const [activeSkip, setActiveSkip] = React.useState(false)\n  const [progress, setprogress] = React.useState(false)\n\n  const handleNext = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n  };\n\n  const handleReset = (e, id) => {\n    Axios.post(`/base/dltImg/${id}`).then((res) => {\n      if (res.data.status) setActiveStep(0)\n    })\n  };\n\n  const handleDone = (e, id) => {\n    Axios.post(`/base/status/${id}`)\n    history.push(`/edit/${id}`)\n  }\n\n  const checkTotalImg = () => {\n    setStepOneFilled('yes');\n  }\n\n  const fillProfil = () => {\n    setStepOneFilled('no')\n  }\n\n  // const skipBtnSkip = () => {\n  //   setActiveSkip(true)\n  // }\n\n  const reloadFunc = React.useCallback(() => {\n    if (activeStep === 0 && props.id) {\n      // IF YOU WANT TO DELETE IMAGES OF USERS IN FIRST EVENT\n      // Axios.post(`/base/onlyImg/${props.id}`)\n      \n    }\n  }, [activeStep, props])\n\n  React.useEffect(() => {\n    reloadFunc()\n    setStepOneFilled('no')\n  }, [reloadFunc])\n\n  // check if data is already filled\n\n  const funProgress = React.useCallback(async () => {\n    if (props.id){\n      await Axios.post(`/base/check1/${props.id}`)\n      setprogress(true)\n    }else\n      setprogress(false)\n  }, [props])\n\n  React.useEffect(() => {\n    funProgress()\n  }, [funProgress, progress])\n\n  return (\n    \n  <div className={classes.root}>\n    {progress === false ? <CircularProgress disableShrink /> : \n      <React.Fragment>\n        <Stepper activeStep={activeStep}>\n          {steps.map((label, index) => {\n            return (\n              <Step key={label}>\n                <StepLabel>{label}</StepLabel>\n              </Step>\n            )\n          })}\n        </Stepper>\n        <div>\n          {activeStep === steps.length ? (\n            <div>\n              <Typography\n                component={'span'}\n                variant={'body2'}\n                className={classes.instructions}\n              >\n                All steps completed - you&apos;re finished\n              </Typography>\n              <Button\n                onClick={(event) => handleReset(event, props.id)}\n                className={classes.button}\n              >\n                Reset\n              </Button>\n              <Button\n                onClick={(event) => handleDone(event, props.id)}\n                className={classes.button}\n                color='primary'\n              >\n                Done\n              </Button>\n            </div>\n          ) : (\n            <div>\n              <Typography\n                component={'span'}\n                variant={'body2'}\n                className={classes.instructions}\n              >\n                {getStepContent(\n                  activeStep,\n                  props,\n                  checkTotalImg,\n                  fillProfil\n                  // skipBtnSkip\n                )}\n              </Typography>\n              <div>\n                \n                <Button\n                  variant='contained'\n                  color='primary'\n                  onClick={handleNext}\n                  className={classes.button}\n                  disabled={stepOneFilled === 'no' ? true : false}\n                >\n                  {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n      </React.Fragment>\n    }\n    </div>\n  )\n}\n\nexport default HorizontalLinearStepper","/Users/anelamra/Desktop/matcha/client/src/component/profil/setting.js",[],"/Users/anelamra/Desktop/matcha/client/src/component/allProfil/likeProfil.js",["190"],"import React from 'react';\nimport Axios from 'axios'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Card, Chip, Avatar, Grid, Button, Typography, IconButton, CardMedia } from '@material-ui/core'\nimport Rating from \"react-rating\"\nimport Report from '../browsing/report'\nimport 'react-responsive-carousel/lib/styles/carousel.min.css' // requires a loader\nimport { Carousel } from 'react-responsive-carousel'\nimport {  FaFemale ,FaMale  } from \"react-icons/fa\"\nimport {\n  Block as BlockIcon,\n  FavoriteBorder\n} from '@material-ui/icons'\nimport SocketContext from \"../../start/SocketContext\";\n\nconst useStyles = makeStyles((theme) => ({\n  diva: {\n    height: '100vh',\n  },\n  media: {\n    height: '40vh',\n  },\n  typo: {\n    marginLeft: '1vw',\n    marginTop: '1vw'\n  },\n  typo1: {\n    marginLeft: '1vw',\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  Button: {\n    marginTop: '2vw',\n    marginLeft: '40vw'\n  }\n}))\n\n\n\n\nconst LikeProfil = (props) => {\n\n    const socket = React.useContext(SocketContext);\n\n    const [cord, setCord] = React.useState([])\n    const [gender, setGender] = React.useState('')\n    const classes = useStyles()\n    const [list, setList] = React.useState([])\n    const [didMount, setDidMount] = React.useState(false)\n\n\n    const getLocalisation = React.useCallback(async () => {\n        await Axios.post(`/browsing/geo/${props.id}`).then((res) => {\n            setGender(res.data.type)\n            setCord(res.data.geo)\n        })\n        \n    }, [props.id])\n\n    React.useEffect(() => {\n        if (cord.length) {\n            Axios.post(`/allProfil/${props.id}`, {\n                cord: cord,\n                gender: gender,\n            }).then((res) => {\n                if (res.data){\n                    setList(res.data)\n                }\n            })\n        } else getLocalisation()\n        setDidMount(true);\n        return () => setDidMount(false);\n\n    }, [cord, gender, getLocalisation, props.id])\n\n    if (!didMount)\n        return null\n\n    const handelBlock = (e, user1, user2) => {\n        Axios.post(`/block/${user1}`, {blocked: user2}).then(res => {\n            if (res.data.status){\n                const newList = list.filter((item) => item.id !== user2)\n                setList(newList)\n            }\n        })\n    }\n\n    const nextUser = (event, id) => {\n        event.preventDefault()\n        const newList = list.filter((item) => item.id !== id)\n        setList(newList)\n        if (list.length === 1)\n            getLocalisation()\n    }\n\n    const handelUnlike = (e, user1, user2) => {\n        e.preventDefault()\n        // matched user disliked you notif\n        Axios.post('http://localhost:3001/notifications/isMatched', { myId: user1, hisId: user2 })\n        .then((res) => {\n          console.log('XxxX8888', res.data.answer);\n          if (res.data.answer == \"yes\") {\n            Axios.post('http://localhost:3001/notifications/saveNotifications',\n            { who: user1, target: user2, type: \"dislike\" })\n            .then((res) => {\n              console.log('reSdasd331100', res.status);\n            }).catch((err) => {console.log(err)});\n          }\n          socket.emit('new_dislike', { idDisiker: user1, idDisLiked: user2 });\n        }).catch((Err) => { console.log('10_5.Err', Err) })\n        ///   \n\n        Axios.post(`/browsing/unlike/${user1}`, {user2 : user2}).then(res => {\n            if (res.data.status){\n                const newList = list.filter((item) => item.id !== user2)\n                setList(newList)\n            }\n        })\n    }\n\n    return (\n        <React.Fragment>\n            {list && list.map((el, iKey) => {\n                return (\n                  <React.Fragment key={iKey}>\n                    <div className={classes.diva}>\n                      <Card>\n                        <Grid\n                          container\n                          justify='center'\n                          alignItems='center'\n                          direction='column'\n                          spacing={2}\n                        >\n                          <Grid item xs={12} sm={3}>\n                            <Typography variant='h6' gutterBottom align='center'>\n                              {el.userName}\n                            </Typography>\n                            <Carousel autoPlay showThumbs={false}>\n                              {el.images.split(',').length > 1\n                                ? el.images.split(',').map((el, iKey) => {\n                                    let srcImg = `http://localhost:3001/${el}`\n                                    let altImg = `display all image loop${iKey}`\n                                    return (\n                                      <div key={iKey}>\n                                        <CardMedia\n                                          className={classes.media}\n                                          image={srcImg}\n                                          title={altImg}\n                                        />\n                                        <p>{altImg}</p>\n                                      </div>\n                                    )\n                                  })\n                                : ''}\n                            </Carousel>\n                          </Grid>\n                          <Grid container item xs={12} sm={2}>\n                            <Avatar\n                              aria-label='recipe'\n                              src={`http://localhost:3001/${\n                                el.images.split(',')[0]\n                              }`}\n                              alt={`test${el.images.split(',')[0]}`}\n                            />\n\n                            <Typography className={classes.typo}>\n                              {'  ' +\n                                el.firstName +\n                                ' ' +\n                                el.lastName +\n                                ', ' +\n                                el.age +\n                                ' '}\n                              {el.gender === 'Male' && (\n                                <FaMale style={{ color: 'green' }} />\n                              )}\n                              {el.gender === 'Women' && (\n                                <FaFemale style={{ color: 'pink' }} />\n                              )}\n                            </Typography>\n                            <Typography\n                              className={classes.typo1}\n                              variant='body2'\n                            >\n                              {el.city + ' | ' + el.km.toFixed(2) + '  km'}\n                            </Typography>\n                          </Grid>\n                          <Grid container item xs={12} sm={2}>\n                            {el.tag1.split(',').length > 0\n                              ? el.tag1.split(',').map((el, iKey) => {\n                                  return (\n                                    <div key={iKey}>\n                                      <Chip\n                                        color='secondary'\n                                        variant='outlined'\n                                        size='small'\n                                        label={el}\n                                      />\n                                    </div>\n                                  )\n                                })\n                              : ''}\n                          </Grid>\n                          <Grid container item xs={12} sm={2}>\n                            <Typography color='primary' variant='caption'>\n                              {el.bio}\n                            </Typography>\n                          </Grid>\n                          <Grid container item xs={12} sm={2}>\n                            {0 < el.fameRating && el.fameRating < 50 && (\n                              <Typography\n                                style={{ color: 'Gold' }}\n                                variant='caption'\n                              >\n                                <Rating\n                                  style={{ pointerEvents: 'none' }}\n                                  initialRating={1}\n                                />\n                                <br />\n                                {el.fameRating + ' exp Useless'}\n                              </Typography>\n                            )}\n                            {50 < el.fameRating && el.fameRating < 150 && (\n                              <Typography\n                                style={{ color: 'Gold' }}\n                                variant='caption'\n                              >\n                                <Rating\n                                  style={{ pointerEvents: 'none' }}\n                                  initialRating={1}\n                                />\n                                <br />\n                                {el.fameRating + ' exp Useless+'}\n                              </Typography>\n                            )}\n                            {150 < el.fameRating && el.fameRating < 250 && (\n                              <Typography\n                                style={{ color: 'Gold' }}\n                                variant='caption'\n                              >\n                                <Rating\n                                  style={{ pointerEvents: 'none' }}\n                                  initialRating={2}\n                                />\n                                <br />\n                                {el.fameRating + ' exp Poor'}\n                              </Typography>\n                            )}\n                            {250 < el.fameRating && el.fameRating < 350 && (\n                              <Typography\n                                style={{ color: 'Gold' }}\n                                variant='caption'\n                              >\n                                <Rating\n                                  style={{ pointerEvents: 'none' }}\n                                  initialRating={2}\n                                />\n                                <br />\n                                {el.fameRating + ' exp Poor+'}\n                              </Typography>\n                            )}\n                            {350 < el.fameRating && el.fameRating < 450 && (\n                              <Typography\n                                style={{ color: 'Gold' }}\n                                variant='caption'\n                              >\n                                <Rating\n                                  style={{ pointerEvents: 'none' }}\n                                  initialRating={3}\n                                />\n                                <br />\n                                {el.fameRating + ' exp Ok'}\n                              </Typography>\n                            )}\n                            {450 < el.fameRating && el.fameRating < 550 && (\n                              <Typography\n                                style={{ color: 'Gold' }}\n                                variant='caption'\n                              >\n                                <Rating\n                                  style={{ pointerEvents: 'none' }}\n                                  initialRating={3}\n                                />\n                                <br />\n                                {el.fameRating + ' exp Ok+'}\n                              </Typography>\n                            )}\n                            {550 < el.fameRating && el.fameRating < 650 && (\n                              <Typography\n                                style={{ color: 'Gold' }}\n                                variant='caption'\n                              >\n                                <Rating\n                                  style={{ pointerEvents: 'none' }}\n                                  initialRating={4}\n                                />\n                                <br />\n                                {el.fameRating + ' exp Good'}\n                              </Typography>\n                            )}\n                            {650 < el.fameRating && el.fameRating < 750 && (\n                              <Typography\n                                style={{ color: 'Gold' }}\n                                variant='caption'\n                              >\n                                <Rating\n                                  style={{ pointerEvents: 'none' }}\n                                  initialRating={4}\n                                />\n                                <br />\n                                {el.fameRating + ' exp Good+'}\n                              </Typography>\n                            )}\n                            {750 < el.fameRating && el.fameRating < 850 && (\n                              <Typography\n                                style={{ color: 'Gold' }}\n                                variant='caption'\n                              >\n                                <Rating\n                                  style={{ pointerEvents: 'none' }}\n                                  initialRating={5}\n                                />\n                                <br />\n                                {el.fameRating + ' exp Excellent'}\n                              </Typography>\n                            )}\n                            {850 < el.fameRating && el.fameRating < 1001 && (\n                              <Typography\n                                style={{ color: 'Gold' }}\n                                variant='caption'\n                              >\n                                <Rating\n                                  style={{ pointerEvents: 'none' }}\n                                  initialRating={5}\n                                />\n                                <br />\n                                {el.fameRating + ' exp Excellent+'}\n                              </Typography>\n                            )}\n                          </Grid>\n                          <Grid container item xs={12} sm={2} direction='row'>\n                            <IconButton\n                              aria-label='Block User'\n                              onClick={(event) =>\n                                handelBlock(event, props.id, el.id)\n                              }\n                            >\n                              <BlockIcon />\n                            </IconButton>\n                            <Report visitor={props.id} visited={el.id} />\n                            <IconButton\n                              aria-label='Unlike user'\n                              onClick={(event) =>\n                                handelUnlike(event, props.id, el.id)\n                              }\n                            >\n                              <Typography>Unlike</Typography>\n                              <FavoriteBorder />\n                            </IconButton>\n                          </Grid>\n                        </Grid>\n                      </Card>\n                      <Button\n                        autoFocus\n                        variant='outlined'\n                        onClick={(event) => nextUser(event, el.id)}\n                        style={{ color: 'DarkBlue' }}\n                      >\n                        Next user\n                      </Button>\n                    </div>\n                  </React.Fragment>\n                )\n            }).slice(0, 1)}\n        </React.Fragment>\n    )\n}\n\nexport default LikeProfil;","/Users/anelamra/Desktop/matcha/client/src/component/Notifications/Notifications.js",["191","192","193","194","195","196","197","198","199"],"import React from 'react';\n// import { makeStyles } from '@material-ui/core/styles';\nimport Popover from '@material-ui/core/Popover';\nimport Typography from '@material-ui/core/Typography';\nimport Axios from \"axios\"\nimport Badge from '@material-ui/core/Badge';\nimport MailIcon from '@material-ui/icons/Mail';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport { StylesProvider } from \"@material-ui/core/styles\";\nimport \"./notifications.css\";\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\n\nimport SocketContext from \"../../start/SocketContext\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        maxWidth: '36ch',\n        backgroundColor: theme.palette.background.paper,\n    },\n    inline: {\n        display: 'inline',\n    },\n    Troot: {\n        '& > *': {\n          margin: theme.spacing(1),\n        },\n      },\n    // bdg : {\n    //     backgroundColor: 'pink'\n    // }\n}));\n\nconst Notifications = (props) => {\n    const classes = useStyles();\n\n    const socket = React.useContext(SocketContext);\n    const [notifNumber, SetNotifNumber] = React.useState(0);\n    const [notifications, setNotifications] = React.useState([]);\n    // const [messageNumber, SetmessageNumber] = React.useState(0);\n\n    function isEmpty(obj) {\n        for (var prop in obj) {\n            if (obj.hasOwnProperty(prop)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n        SetNotifNumber(0);\n        getUserNotifs(props)\n    };\n\n    const getUserNotifs = (props) => {\n        console.log(props);\n        Axios.post('http://localhost:3001/notifications/getUserNotifs', { userId: props.myInfos.id })\n            .then((res) => {\n                console.log('111111');\n                if (isEmpty(res.data.whoInfos) == false) {\n                    setNotifications(res.data.whoInfos);\n                    console.log('saved notif', res.data.whoInfos);\n                }\n            }).catch((Err) => { console.log('10_1.Err', Err) })\n    }\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const snn = (x) => {\n        SetNotifNumber(\" \");\n    }\n\n    const open = Boolean(anchorEl);\n    const id = open ? 'simple-popover' : undefined;\n\n    // React.useEffect(() => {\n        socket.on('receive_like', (data) => {\n            console.log('|-----=> ', data);\n            if(data.target === props.myInfos.id)\n                snn(notifNumber);\n        })\n        socket.on('receive_visit', (data) => {\n            console.log('|---visit=> ', data);\n            if(data.target === props.myInfos.id)\n                snn(notifNumber);\n        })\n        socket.on('receive_dislike', (data) => {\n            console.log('|---dislike=> ', data.target, props.myInfos.id);\n            if(data.idDisliked === props.myInfos.id)\n                snn(notifNumber);\n        })\n\n    // }, []);\n    console.log('notifications', notifications)\n    return (\n        <StylesProvider injectFirst>\n\n        <div className={classes.Troot}>\n            <Badge className={classes.bdg} badgeContent={notifNumber} aria-describedby={id} color=\"secondary\" onClick={handleClick}>\n                <NotificationsIcon />\n            </Badge>\n            <Popover\n                id={id}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={handleClose}\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n            >\n                {\n                    (notifications.length === 0) ? <Typography>nulllllllllll</Typography>\n                     :       \n                    notifications.map((el) => {\n                        if(el.type != \"message\")\n                        {\n\n                            return(\n                                <List className={classes.root}>\n\n                        <ListItem alignItems=\"flex-start\">\n                            <ListItemAvatar>\n                                <Avatar alt={`${el.userName}image`} src={`http://localhost:3001/${el.image}`} />\n                            </ListItemAvatar>\n                            <ListItemText\n                                primary={\n                                    el.type == \"like\" ? \"New like\" \n                                    :\n                                    el.type == \"visit\" ? \"New visit\"\n                                    :\n                                    el.type == \"likes back\" ? \"Matched\"\n                                    :\n                                    el.type == \"dislike\" ? \"Unmatched\" : ''\n                                }\n                                secondary={\n                                    <React.Fragment>\n                                        <Typography\n                                            component=\"span\"\n                                            variant=\"body2\"\n                                            className={classes.inline}\n                                            color=\"textPrimary\"\n                                            >\n                                            {el.userName}\n                                        </Typography>\n                                        {`${el.type }your profile`}\n                                    </React.Fragment>\n                                }\n                                />\n                        </ListItem>\n                        <Divider variant=\"inset\" component=\"li\" />\n\n                    </List>\n                            )\n                        }\n                            })\n                        }\n                        \n                        </Popover>\n                        {/* <Badge badgeContent={messageNumber} color=\"primary\">\n                        <MailIcon />\n            </Badge> */}\n            {/* <Badge badgeContent={notifNumber} color=\"primary\">\n                <NotificationsIcon />\n            </Badge> */}\n        </div>\n        </StylesProvider>\n    )\n};\n\n\n\n\n\nexport default Notifications;","/Users/anelamra/Desktop/matcha/client/src/component/history/history.js",[],"/Users/anelamra/Desktop/matcha/client/src/component/browsing/sort.js",[],"/Users/anelamra/Desktop/matcha/client/src/component/browsing/profil.js",["200"],"import React from 'react';\nimport Axios from 'axios'\nimport moment from 'moment'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { withStyles } from '@material-ui/core/styles'\nimport { Chip, Avatar, Grid, Button, Dialog, Typography, IconButton, CardMedia } from '@material-ui/core'\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport {\n  Close as CloseIcon,\n  More as MoreIcon,\n  Block as BlockIcon,\n} from '@material-ui/icons'\nimport 'react-responsive-carousel/lib/styles/carousel.min.css' // requires a loader\nimport { Carousel } from 'react-responsive-carousel'\nimport {  FaFemale ,FaMale  } from \"react-icons/fa\"\nimport Rating from \"react-rating\"\nimport Report from './report'\nimport SocketContext from \"../../start/SocketContext\";\n\nconst styles = (theme) => ({\n    root: {\n        margin: 0,\n        padding: theme.spacing(2),\n        marginLeft: '12vw',\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n});\n\nconst useStyles = makeStyles((theme) => ({\n  media: {\n    height: '40vh',\n  },\n  typo: {\n    marginLeft: '1vw',\n    marginTop: '1vw'\n  },\n  typo1: {\n    marginLeft: '1vw',\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n}))\n\nconst DialogTitle = withStyles(styles)((props) => {\n  const socket = React.useContext(SocketContext);\n    const { children, classes, onClose, ...other } = props;\n    return (\n        <MuiDialogTitle disableTypography className={classes.root} {...other}>\n            <Typography variant=\"h6\">{children}</Typography>\n            {onClose ? (\n                <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n                    <CloseIcon />\n                </IconButton>\n            ) : null}\n        </MuiDialogTitle>\n    );\n});\n\nconst DialogContent = withStyles((theme) => ({\n    root: {\n        padding: theme.spacing(2),\n    },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme) => ({\n    root: {\n        margin: 0,\n        padding: theme.spacing(1),\n    },\n}))(MuiDialogActions);\n\nconst CustomizedDialogs = (props) => {\n\n    const socket = React.useContext(SocketContext);\n\n    const [open, setOpen] = React.useState(false);\n    const classes = useStyles()\n\n    const handleClickOpen = (e, visitor, visited) => {\n        setOpen(true);\n        Axios.post(`/browsing/history/${visited}`, {visitor: visitor})\n        // socket visit\n        console.log('ter , ted', props.visitor, props.visited);\n        Axios.post('http://localhost:3001/notifications/saveNotifications', { who: props.visitor, target: props.visited, type: \"visit\" })\n        .then((res) => {\n            console.log('reSdddd000003', res.status);\n        })\n        socket.emit('new_visit', {who : props.visitor, target : props.visited});\n    };\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handelBlock = (e) => {\n      Axios.post(`/block/${props.visitor}`, {blocked: props.visited}).then(res => {\n        if (res.data.status){\n          const newList = props.list.filter((item) => item.id !== props.visited)\n          props.setlist(newList)\n        }\n      })\n    }\n\n    return (\n      <React.Fragment>\n        <div\n          role='button'\n          onClick={(event) =>\n            handleClickOpen(event, props.visitor, props.visited)\n          }\n        >\n          <MoreIcon color='primary' />\n        </div>\n        <Dialog\n          fullWidth\n          maxWidth='sm'\n          onClose={handleClose}\n          aria-labelledby='customized-dialog-title'\n          open={open}\n        >\n          <DialogTitle id='customized-dialog-title' onClose={handleClose}>\n            {props.element.userName}\n          </DialogTitle>\n          <DialogContent>\n            <Grid\n              container\n              justify='center'\n              alignItems='center'\n              direction='column'\n              spacing={2}\n            >\n              <Grid item xs={12} sm={9}>\n                <Carousel autoPlay showThumbs={false}>\n                  {props.element.images.split(',').length > 1\n                    ? props.element.images.split(',').map((el, iKey) => {\n                        let srcImg = `http://localhost:3001/${el}`\n                        let altImg = `display all image loop${iKey}`\n                        return (\n                          <div key={iKey}>\n                            <CardMedia\n                              className={classes.media}\n                              image={srcImg}\n                              title={altImg}\n                            />\n                            <p>{altImg}</p>\n                          </div>\n                        )\n                      })\n                    : ''}\n                </Carousel>\n              </Grid>\n              <Grid container item xs={8} sm={4}>\n                <props.StyledBadge\n                  overlap='circle'\n                  anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'right',\n                  }}\n                  variant='dot'\n                  status={props.status}\n                >\n                  <Avatar\n                    aria-label='recipe'\n                    src={`http://localhost:3001/${\n                      props.element.images.split(',')[0]\n                    }`}\n                    alt={`test${props.element.images.split(',')[0]}`}\n                  />\n                </props.StyledBadge>\n                {props.curTime && (\n                  <Typography\n                    variant='body2'\n                    display='initial'\n                    className={classes.date}\n                  >\n                    Last Seen {moment(props.curTime).fromNow()}\n                  </Typography>\n                )}\n                <Typography className={classes.typo}>\n                  {'  ' +\n                    props.element.firstName +\n                    ' ' +\n                    props.element.lastName +\n                    ', ' +\n                    props.element.age +\n                    ' '}\n                  {props.element.gender === 'Male' && (\n                    <FaMale style={{ color: 'green' }} />\n                  )}\n                  {props.element.gender === 'Women' && (\n                    <FaFemale style={{ color: 'pink' }} />\n                  )}\n                </Typography>\n                <Typography className={classes.typo1} variant='body2'>\n                  {props.element.city +\n                    ' | ' +\n                    props.element.km.toFixed(2) +\n                    '  km'}\n                </Typography>\n              </Grid>\n              <Grid container item xs={8} sm={4}>\n                {props.element.tag1 && props.element.tag1.split(',').length > 0\n                  ? props.element.tag1.split(',').map((el, iKey) => {\n                      return (\n                        <div key={iKey}>\n                          <Chip\n                            color='secondary'\n                            variant='outlined'\n                            size='small'\n                            label={el}\n                          />\n                        </div>\n                      )\n                    })\n                  : ''}\n              </Grid>\n              <Grid item xs={8} sm={4}>\n                <Typography color='primary' variant='caption'>\n                  {props.element.bio}\n                </Typography>\n              </Grid>\n              <Grid item xs={8} sm={4}>\n                {0 < props.element.fameRating && props.element.fameRating < 50 && (\n                  <Typography style={{ color: 'Gold' }} variant='caption'>\n                    <Rating\n                      style={{ pointerEvents: 'none' }}\n                      initialRating={1}\n                    />\n                    <br />\n                    {props.element.fameRating + ' exp Useless'}\n                  </Typography>\n                )}\n                {50 < props.element.fameRating &&\n                  props.element.fameRating < 150 && (\n                    <Typography style={{ color: 'Gold' }} variant='caption'>\n                      <Rating\n                        style={{ pointerEvents: 'none' }}\n                        initialRating={1}\n                      />\n                      <br />\n                      {props.element.fameRating + ' exp Useless+'}\n                    </Typography>\n                  )}\n                {150 < props.element.fameRating &&\n                  props.element.fameRating < 250 && (\n                    <Typography style={{ color: 'Gold' }} variant='caption'>\n                      <Rating\n                        style={{ pointerEvents: 'none' }}\n                        initialRating={2}\n                      />\n                      <br />\n                      {props.element.fameRating + ' exp Poor'}\n                    </Typography>\n                  )}\n                {250 < props.element.fameRating &&\n                  props.element.fameRating < 350 && (\n                    <Typography style={{ color: 'Gold' }} variant='caption'>\n                      <Rating\n                        style={{ pointerEvents: 'none' }}\n                        initialRating={2}\n                      />\n                      <br />\n                      {props.element.fameRating + ' exp Poor+'}\n                    </Typography>\n                  )}\n                {350 < props.element.fameRating &&\n                  props.element.fameRating < 450 && (\n                    <Typography style={{ color: 'Gold' }} variant='caption'>\n                      <Rating\n                        style={{ pointerEvents: 'none' }}\n                        initialRating={3}\n                      />\n                      <br />\n                      {props.element.fameRating + ' exp Ok'}\n                    </Typography>\n                  )}\n                {450 < props.element.fameRating &&\n                  props.element.fameRating < 550 && (\n                    <Typography style={{ color: 'Gold' }} variant='caption'>\n                      <Rating\n                        style={{ pointerEvents: 'none' }}\n                        initialRating={3}\n                      />\n                      <br />\n                      {props.element.fameRating + ' exp Ok+'}\n                    </Typography>\n                  )}\n                {550 < props.element.fameRating &&\n                  props.element.fameRating < 650 && (\n                    <Typography style={{ color: 'Gold' }} variant='caption'>\n                      <Rating\n                        style={{ pointerEvents: 'none' }}\n                        initialRating={4}\n                      />\n                      <br />\n                      {props.element.fameRating + ' exp Good'}\n                    </Typography>\n                  )}\n                {650 < props.element.fameRating &&\n                  props.element.fameRating < 750 && (\n                    <Typography style={{ color: 'Gold' }} variant='caption'>\n                      <Rating\n                        style={{ pointerEvents: 'none' }}\n                        initialRating={4}\n                      />\n                      <br />\n                      {props.element.fameRating + ' exp Good+'}\n                    </Typography>\n                  )}\n                {750 < props.element.fameRating &&\n                  props.element.fameRating < 850 && (\n                    <Typography style={{ color: 'Gold' }} variant='caption'>\n                      <Rating\n                        style={{ pointerEvents: 'none' }}\n                        initialRating={5}\n                      />\n                      <br />\n                      {props.element.fameRating + ' exp Excellent'}\n                    </Typography>\n                  )}\n                {850 < props.element.fameRating &&\n                  props.element.fameRating < 1001 && (\n                    <Typography style={{ color: 'Gold' }} variant='caption'>\n                      <Rating\n                        style={{ pointerEvents: 'none' }}\n                        initialRating={5}\n                      />\n                      <br />\n                      {props.element.fameRating + ' exp Excellent+'}\n                    </Typography>\n                  )}\n              </Grid>\n              <Grid container item xs={8} sm={4} direction='row'>\n                <IconButton\n                  aria-label='Block User'\n                  onClick={(event) => handelBlock(event)}\n                >\n                  <BlockIcon />\n                </IconButton>\n                <Report visitor={props.visitor} visited={props.visited} />\n              </Grid>\n            </Grid>\n          </DialogContent>\n          <DialogActions>\n            <Button autoFocus onClick={handleClose} color='primary'>\n              Done\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </React.Fragment>\n    )\n}\n\nexport default CustomizedDialogs","/Users/anelamra/Desktop/matcha/client/src/component/browsing/map.js",[],"/Users/anelamra/Desktop/matcha/client/src/component/browsing/filter.js",[],"/Users/anelamra/Desktop/matcha/client/src/component/browsing/search.js",[],"/Users/anelamra/Desktop/matcha/client/src/component/chat/ChatBox.js",["201","202","203","204","205"],"import React from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Input, Grid } from '@material-ui/core/';\n// import MuiAlert from '@material-ui/lab/Alert';\nimport SocketContext from \"../../start/SocketContext\";\nimport Axios from \"axios\";\nimport \"./ChatBox.js\";\n// import { keys } from \"@material-ui/core/styles/createBreakpoints\";\n\n// import { io } from \"socket.io-client\";\n// const URL = \"http://localhost:3001\";\n// const socket = io(URL);\n\n\nconst useStyles = makeStyles(() => ({\n    chatBox: {\n        height: '100%',\n        backgroundColor: 'white',\n        position: \"relative\",\n    },\n    messages: {\n        padding: '14px',\n        // position: 'relaive',\n    },\n    textInput: {\n        position: \"absolute\",\n        bottom: 0,\n        color: 'purple',\n        width: '100%',\n    },\n    right: {\n        wordBreak: 'break-all',\n        padding: '10px',\n    },\n    left: {\n        wordBreak: 'break-all',\n        padding: '10px',\n    },\n    myText: {\n        width: 'fit-content',\n        borderRadius: '7px',\n        backgroundColor: '#e6b4e4',\n        padding: '10px',\n        float: 'right',\n    },\n    hisText: {\n        color: 'white',\n        width: 'fit-content',\n        borderRadius: '7px',\n        backgroundColor: '#000000a8',\n        padding: '10px',\n\n    },\n\n}));\nconst isEmpty = (obj) => {\n    for (var prop in obj) {\n        if (obj.hasOwnProperty(prop)) {\n            return false;\n        }\n    } return true;\n}\n\nconsole.log('123456879')\n\n\nconst ChatBox = (props) => {\n    const [conversation, setCoversation] = React.useState([]);\n    const classes = useStyles();\n\n    const socket = React.useContext(SocketContext);\n\n\n    React.useEffect(() => {\n        // console.log('IDIDIDIDIDI', props.id);\n        if (!isEmpty(props.hisInfos)) {\n            Axios.post('http://localhost:3001/chat/getConversation', { user1: props.id, user2: props.hisInfos.id })\n                .then((res) => {\n                    if (res.data.response.length != 0) {\n                        // console.log('resConv', res.data.response);\n                        setCoversation(res.data.response);\n                        // displayMessages(res.data.response, props.myInfos, props.hisInfos);\n                    }\n                    if (res.data.response === \"\") {\n                        setCoversation([]);\n                        // console.log(\"Say Hello\");\n                    }\n                })\n                .catch((err) => { console.log('ErR' + err) });\n        }\n\n    }, [props.hisInfos])\n\n    const sendMessage = (e) => {\n        e.preventDefault();\n        if (props.hisInfos) {\n            var input = document.getElementById('msg');\n            if (e.keyCode === 13 && input.value) {\n                saveMessage(input.value);\n                // socket msg\n                Axios.post('http://localhost:3001/notifications/saveNotifications', { who: props.id, target: props.hisInfos.id, type: \"message\" })\n                    .then((res) => {\n                        console.log('reSdddd000003', res.status);\n                    })\n                socket.emit('msg', { text: input.value, from: props.myInfos.id, to: props.hisInfos.id });\n                input.value = '';\n\n                // input.value ===> append ==> me right\n                // console.log('13');\n            }\n        } else {\n            console.log('cant find hisInfos')\n        }\n    }\n    React.useEffect(() => {\n        socket.on('new_msg', (data) => {\n            // alert(1)\n            \n            console.log('--------------------------------------')\n            console.log('Data', data);\n        });\n\n    }, [])\n\n    const saveMessage = (content) => {\n        Axios.post('http://localhost:3001/chat/saveMessage', { from: props.id, to: props.hisInfos.id, content: content })\n            .then((res) => {\n                // console.log(res);\n                // if (res.data.response === true)\n                    // socket.emit('new')\n            }).catch((err) => { console.log(err) });\n    }\n\n    // console.log('len****', conversation);\n    // console.log('-props', props.hisInfos)\n    if (!isEmpty(props.hisInfos)) {\n        return (\n            <div className={classes.chatBox}>\n                <Grid container direction=\"column\" spacing={2} className=\"messages\">\n                    {\n                        conversation.length != 0 && (\n\n\n                            conversation.map((element) => {\n                                if (element.id_from == props.myInfos.id) {\n                                    return (\n                                        //hnaya\n                                        <Grid item container className={classes.me}>\n                                            <Grid item sm={4}></Grid>\n                                            <Grid item sm={8} className={classes.right}>\n                                                <div className={classes.myText}>\n                                                    {element.content}\n                                                </div>\n                                            </Grid>\n                                        </Grid>\n                                    )\n                                } else {\n                                    return (\n                                        <Grid item container className={classes.him}>\n                                            <Grid item sm={8} className={classes.left}>\n                                                <div className={classes.hisText}>\n                                                    {element.content}\n                                                </div>\n                                            </Grid>\n                                            <Grid item sm={4}></Grid>\n                                        </Grid>\n                                    )\n                                }\n                            })\n                        )\n                    }\n                    {\n                        !conversation.length && (\n                            <div>\n                                Say Hello\n                            </div>\n                        )\n                    }\n                </Grid>\n                <Input id=\"msg\" type=\"text\" className={classes.textInput} placeholder=\"Message\" onKeyUp={sendMessage} />\n            </div>\n        )\n    }\n\n    else {\n        return (\n            <div className={classes.chatBox}>\n                <p>select the user you want to chat with</p>\n            </div>\n        )\n    }\n}\n\nexport default ChatBox;","/Users/anelamra/Desktop/matcha/client/src/component/chat/LeftSection.js",["206","207","208","209","210","211"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport SwipeableViews from \"react-swipeable-views\";\nimport { StylesProvider , makeStyles, useTheme, withStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport { Grid, Tabs, Tab, AppBar, Paper, List ,ListItem ,ListItemSecondaryAction ,ListItemText ,ListItemAvatar ,Checkbox ,Avatar, Badge, Hidden } from '@material-ui/core';\n\n\nconst StyledBadge = withStyles((theme) => ({\n    badge: {\n      backgroundColor: '#44b700',\n      color: '#44b700',\n      boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\n      '&::after': {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        borderRadius: '50%',\n        animation: '$ripple 1.2s infinite ease-in-out',\n        border: '1px solid currentColor',\n        content: '\"\"',\n      },\n    },\n    '@keyframes ripple': {\n      '0%': {\n        transform: 'scale(.8)',\n        opacity: 1,\n      },\n      '100%': {\n        transform: 'scale(2.4)',\n        opacity: 0,\n      },\n    },\n  }))(Badge);\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n  // console.log(\"props\", props);\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`full-width-tabpanel-${index}`}\n      aria-labelledby={`full-width-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `full-width-tab-${index}`,\n    \"aria-controls\": `full-width-tabpanel-${index}`\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  Left: {\n    backgroundColor: theme.palette.background.paper,\n    // width: 500\n    height: \"70vh\"\n  }\n}));\n\nexport default function FullWidthTabs(props) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [value, setValue] = React.useState(0);\n\n  \n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const handleChangeIndex = (index) => {\n    setValue(index);\n  };\n\n  return (\n      <div className={classes.Left}>\n        <AppBar position=\"static\" color=\"default\">\n          <Tabs\n            value={value}\n            onChange={handleChange}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            variant=\"fullWidth\"\n            aria-label=\"full width tabs example\"\n          >\n            <Tab label=\"Chats\" {...a11yProps(0)} />\n            <Tab label=\"People(matched)\" {...a11yProps(1)} />\n          </Tabs>\n        </AppBar>\n        <SwipeableViews\n          axis={theme.direction === \"rtl\" ? \"x-reverse\" : \"x\"}\n          index={value}\n          onChangeIndex={handleChangeIndex}\n        >\n          <TabPanel value={value} index={0} dir={theme.direction}>\n            Conversations.....\n          </TabPanel>\n          <TabPanel id=\"99909090090\" value={value} index={1} dir={theme.direction}>\n            <div>\n\n          <List id=\"0101010\">\n            {\n              props.people.map((item, index) => {\n                const {userName, id, image} = item;\n                const labelId = `checkbox-list-secondary-label-${index}`;\n                return (\n                  <ListItem key={index} onClick={() => {props.passHisInfos({userName:userName, id:id, image:image})}}>\n                         <ListItemAvatar>\n                         <StyledBadge                      \n                          overlap=\"circle\"\n                          anchorOrigin={{\n                            vertical: 'bottom',\n                            horizontal: 'right',\n                          }}\n                          variant=\"dot\">\n                             <Avatar\n                                 alt={`${userName} picture`}\n                                 src={`http://localhost:3001/${image}`}\n                                 />\n                             </StyledBadge>\n                         </ListItemAvatar>\n                         <ListItemText id={labelId} primary={userName} />\n                     </ListItem>   \n                    );\n                  })\n                }\n            </List>\n                </div>\n          </TabPanel>\n        </SwipeableViews>\n      </div>\n  );\n}\n","/Users/anelamra/Desktop/matcha/client/src/component/profil/geo.js",[],"/Users/anelamra/Desktop/matcha/client/src/component/forget/editPassword.js",[],"/Users/anelamra/Desktop/matcha/client/src/component/browsing/report.js",[],"/Users/anelamra/Desktop/matcha/client/src/component/profil/myAddImages.js",["212","213","214","215","216"],"import React from 'react'\nimport Axios from 'axios'\nimport Size from '../helpers/size'\nimport { Grid, Card, CardMedia } from '@material-ui/core'\nimport { Button, Dialog, DialogActions, DialogTitle } from '@material-ui/core';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { IoMdAddCircle, IoIosRemoveCircleOutline } from 'react-icons/io'\nimport { useEffect } from 'react'\nimport AlertDialoge from './alertDialog'\n\nconst intialItems = [\n  {\n    id: '0',\n    value: '',\n    isDragDisabled: true,\n    // isDropDisabled: true,\n    disabled: false,\n  },\n  {\n    id: '1',\n    value: '',\n    isDragDisabled: true,\n    // isDropDisabled: true,\n    disabled: false,\n  },\n  {\n    id: '2',\n    value: '',\n    isDragDisabled: true,\n    // isDropDisabled: true,\n    disabled: false,\n  },\n  {\n    id: '3',\n    value: '',\n    isDragDisabled: true,\n    // isDropDisabled: true,\n    disabled: false,\n  },\n  {\n    id: '4',\n    value: '',\n    isDragDisabled: true,\n    // isDropDisabled: true,\n    disabled: false,\n  },\n]\nconst useStyles = makeStyles(() => ({\n  root: {\n    maxWidth: 600,\n  },\n  media: {\n    height: 600,\n    width: 400,\n  },\n  big: {\n    position: 'relative',\n    backgroundColor: '#E0E4E9',\n    width: '200px',\n    height: '300px',\n    borderRadius: '10px',\n    border: '2px solid white',\n  },\n  addCircle: {\n    position: 'absolute',\n    right: '4px',\n    top: '4px',\n    color: 'pink',\n    width: '40px',\n    height: '40px',\n  },\n  media1: {\n    width: '200px',\n    height: '300px',\n  },\n}))\n\nconst MyAddImages = (props) => {\n  const classes = useStyles()\n  const [Items, UpdateItems] = React.useState(intialItems)\n  const imageRefs = React.useRef([])\n  const [ProfileImg, SetProfileImg] = React.useState(null)\n  const ProfImgRef = React.useRef(null)\n  const [effect, triggerEffect] = React.useState(false)\n  const [printImages, setprintImages] = React.useState([])\n  const [open, setOpen] = React.useState(false);\n  const [keyIndex, setKeyIndex] = React.useState()\n\n  const handleClickOpen = (index) => {\n    setKeyIndex(index)\n    setOpen(true);\n  }\n\n  const handleClose = () => {\n    setOpen(false);\n  }\n\n  imageRefs.current = []\n\n  const addToRefs = (el) => {\n    if (el && !imageRefs.current.includes(el)) {\n      imageRefs.current.push(el)\n    }\n  }\n\n  // display images inside dragar\n\n  React.useEffect(() => {\n      Axios.post(`/base/displayIndrager/${props.id}`).then((res) => {\n        if (!printImages.length && res.data.images[0] !== null)\n          setprintImages(res.data.images[0].split(','))\n      })\n  }, [props, printImages])\n\n  \n\n  React.useEffect(() => {\n    if (printImages !== \"\"){\n      printImages.map((el, iKey) => {\n        let srcImg = `http://localhost:3001/${el}`\n        if (iKey === 0) {\n          SetProfileImg(srcImg)\n        }\n        triggerEffect(!effect)\n        if (srcImg != null) {\n          var tmp = Items\n          tmp[iKey].value = srcImg\n          UpdateItems(tmp)\n          const gridId = imageRefs.current[iKey].id + 'img'\n          const grid = document.getElementById(gridId)\n          grid.style.background = 'url(' + srcImg + ')'\n          grid.style.backgroundSize = '200px 300px'\n        }\n      })\n    }\n  }, [printImages])\n\n  // display of images\n\n  const displayProfileImg = React.useCallback(() => {\n    if (ProfileImg != null) {\n      var ProfileImgDiv = ProfImgRef.current\n      ProfileImgDiv.style.background = 'url(' + ProfileImg + ')'\n      ProfileImgDiv.style.backgroundSize = '400px 600px'\n    }\n  }, [ProfileImg])\n\n  useEffect(() => {\n    displayProfileImg()\n  }, [displayProfileImg])\n\n  //////////////////////////\n\n  // count of images\n\n  const fetchImgs = React.useCallback(async () => {\n    let s = await Axios.post(`/base/img/fetch/${props.id}`, {\n      userId: props.id,\n    }).then((res) => {\n      if (res.data.s === 1) return true\n      else return false\n    })\n    return s\n  }, [props])\n\n  useEffect(() => {\n    fetchImgs().then((res) => {\n      if (res) props.checkTotalImg()\n    })\n    if (ProfileImg) props.checkTotalImg()\n  }, [fetchImgs, props, ProfileImg])\n\n  ////////////////////////////\n\n  const handleInsUpd = () => {\n    triggerInput(keyIndex)\n    setOpen(false)\n  }\n\n  const triggerInput = (index) => {\n    if (imageRefs.current[index]) {\n      imageRefs.current[index].click()\n    }\n  }\n\n  const handleChange = async (event, id, index) => {\n    if (event.target.files[0]) {\n      var value = URL.createObjectURL(event.target.files[0])\n      if (index === 0) {\n        SetProfileImg(value)\n      }\n      triggerEffect(!effect)\n      if (value != null) {\n        var tmp = Items\n        tmp[index].value = value\n        UpdateItems(tmp)\n        const gridId = imageRefs.current[index].id + 'img'\n        const grid = document.getElementById(gridId)\n        grid.style.background = 'url(' + value + ')'\n        grid.style.backgroundSize = '200px 300px'\n      }\n    }\n\n    event.preventDefault()\n    var formData = new FormData()\n    formData.set('index', index)\n    formData.set('userId', props.id)\n    formData.set('file', event.target.files[0])\n    const config = {\n      headers: {\n        'content-type': 'multipart/form-data',\n      },\n    }\n    await Axios.post(`base/img/${props.id}`, formData, config)\n  }\n\n  async function handleOnDragEnd(result) {\n    if (!result.destination) return\n    const items = Array.from(Items)\n    const [reorderedItem] = items.splice(result.source.index, 1)\n    items.splice(result.destination.index, 0, reorderedItem)\n    UpdateItems(items)\n    items.map((el, index) => {\n      if (index === 0 && el.value !== '') {\n        SetProfileImg(el.value)\n      }\n      return null\n    })\n    await Axios.post(`base/img/dnd/${props.id}`, {\n      index: result.source.index,\n      id: result.destination.index,\n    })\n  }\n\n  const handleDeleteDialog = () => {\n    handelRemoveImg(keyIndex)\n    setOpen(false)\n  }\n\n  const handelRemoveImg = async (key) => {\n    console.log(printImages[key])\n    if (printImages[key] === undefined){\n      await Axios.post(`/base/displayIndrager/${props.id}`).then((res) => {\n        if (res.data.images[0] !== null){\n          res.data.images[0].split(',').map((el, Keyi) => {\n            if (key === Keyi)\n              Axios.post(`base/dltImgUser/${props.id}`, {image: el})\n          })\n        }\n      })\n    }else{\n      if (Items[key].value !== '' && key !== 0){\n        // if (key === 0) {\n        //   SetProfileImg('https://raw.githubusercontent.com/hassanreus/img/master/profilImageManWomen.jpg')\n        // }\n        var tmp = Items\n        tmp[key].value = ''\n        UpdateItems(tmp)\n        const gridId = imageRefs.current[key].id + 'img'\n        const grid = document.getElementById(gridId)\n        grid.style.background = 'url() #E0E4E9'\n        grid.style.backgroundSize = '200px 300px'\n        await Axios.post(`base/dltImgUser/${props.id}`, {image: printImages[key]})\n        const newList = printImages.filter((item, _key) => key !== _key)\n        // console.log(newList)\n        setprintImages(newList)\n      }\n    }\n  }\n\n  return (\n    <Size>\n      <Grid container>\n        {/* {printImages !== \"\" && printImages.split(',').length >= 0\n          ? printImages.split(',').map((el, iKey) => {\n              let srcImg = `http://localhost:3001/${el}`\n              let altImg = `display all image loop${iKey}`\n              return (\n                <div key={iKey} className={classes.big}>\n                  <CardMedia\n                    className={classes.media1}\n                    image={srcImg}\n                    title={altImg}\n                  />\n                  <IoIosRemoveCircleOutline className={classes.addCircle} onClick={(event) => handelRemoveImg(event, iKey)}/>\n                </div>\n              )\n            })\n          : ''} */}\n        <div style={{ overflowY: 'scroll', height: '600px' }}>\n          <DragDropContext onDragEnd={handleOnDragEnd}>\n            <Droppable droppableId='items'>\n              {(provided) => (\n                <div {...provided.droppableProps} ref={provided.innerRef}>\n                  {Items.map(({ id }, index) => {\n                    return (\n                      <Draggable\n                        // isDragDisabled={isDD}\n                        key={id}\n                        draggableId={id}\n                        index={index}\n                      >\n                        {(provided) => (\n                          <div\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                            ref={provided.innerRef}\n                            id={id + 'img'}\n                            className={classes.big}\n                            onClick={() => {handleClickOpen(index)}}\n                          >\n                            <input\n                              name='file'\n                              // accept=\".gif,.jpg,.jpeg,.png\"\n                              ref={addToRefs}\n                              onChange={(e) => {\n                                handleChange(e, id, index)\n                              }}\n                              hidden\n                              id={id}\n                              type='file'\n                            />\n                            {provided.placeholder}\n                            {/* {console.log(Object.keys(printImages.split(',')))}\n                            {Object.keys(printImages.split(',')) <= index ? <IoMdAddCircle className={classes.addCircle} /> : <IoIosRemoveCircleOutline className={classes.addCircle} onClick={(event) => handelRemoveImg(event, id)} />} */}\n                            <IoMdAddCircle className={classes.addCircle} />\n                          </div>\n                        )}\n                      </Draggable>\n                    )\n                  })}\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n        </div>\n        <Dialog\n          open={open}\n          onClose={handleClose}\n          aria-labelledby=\"alert-dialog-title\"\n          aria-describedby=\"alert-dialog-description\"\n        >\n          <DialogTitle id=\"alert-dialog-title\">{\"Choose your action:\"}</DialogTitle>\n          <DialogActions>\n            <Button onClick={handleInsUpd} color=\"primary\">\n              Insert/Update\n          </Button>\n            <Button onClick={handleDeleteDialog} color=\"secondary\" autoFocus>\n              Delete\n          </Button>\n          </DialogActions>\n        </Dialog>\n        {/* <div\n          ref={ProfImgRef}\n          style={{ width: \"400px\", height: \"600px\", border: \"1px black solid\" }}\n          >\n        </div> */}\n        <Card className={classes.root}>\n          <CardMedia\n            image='https://raw.githubusercontent.com/hassanreus/img/master/profilImageManWomen.jpg'\n            title='Contemplative Reptile'\n            // style={{ width: \"400px\", height: \"600px\" }}\n            ref={ProfImgRef}\n            className={classes.media}\n          />\n        </Card>\n      </Grid>\n    </Size>\n  )\n}\n\nexport default MyAddImages\n","/Users/anelamra/Desktop/matcha/client/src/component/profil/fillProfil.js",[],"/Users/anelamra/Desktop/matcha/client/src/component/profil/alertDialog.js",[],"/Users/anelamra/Desktop/matcha/client/src/component/Notifications/messageNotification.js",["217","218","219","220"],"/Users/anelamra/Desktop/matcha/client/src/component/Notifications/MessageNotification.js",["221","222","223","224","225","226"],"import React from 'react';\n// import { makeStyles } from '@material-ui/core/styles';\nimport Popover from '@material-ui/core/Popover';\nimport Typography from '@material-ui/core/Typography';\nimport Axios from \"axios\"\nimport Badge from '@material-ui/core/Badge';\nimport MailIcon from '@material-ui/icons/Mail';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport { StylesProvider } from \"@material-ui/core/styles\";\nimport \"./notifications.css\";\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\n\nimport SocketContext from \"../../start/SocketContext\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n\n        maxWidth: '36ch',\n        backgroundColor: theme.palette.background.paper,\n    },\n    inline: {\n        display: 'inline',\n    },\n    Troot: {\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n    },\n    // bdg : {\n    //     backgroundColor: 'pink'\n    // }\n}));\n\nconst MessageNotification = (props) => {\n    const classes = useStyles();\n\n    const socket = React.useContext(SocketContext);\n    const [messageNumber, SetmessageNumber] = React.useState(0);\n    const [msgNotifications, setMsgNotifications] = React.useState([]);\n\n    function isEmpty(obj) {\n        for (var prop in obj) {\n            if (obj.hasOwnProperty(prop)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n        SetmessageNumber(0);\n        getUserNotifs(props)\n    };\n\n    const getUserNotifs = (props) => {\n        console.log(props);\n        Axios.post('http://localhost:3001/notifications/getUserNotifs', { userId: props.myInfos.id })\n            .then((res) => {\n                console.log('111111');\n                if (isEmpty(res.data.whoInfos) == false) {\n                    setMsgNotifications(res.data.whoInfos);\n                    console.log('saved notif msg', res.data.whoInfos);\n                }\n            }).catch((Err) => { console.log('10_1.Err', Err) })\n    }\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const snn = (x) => {\n        SetmessageNumber(\" \");\n    }\n\n    const open = Boolean(anchorEl);\n    const id = open ? 'simple-popover' : undefined;\n\n    React.useEffect(() => {\n    socket.on('new_msg', (data) => {\n        console.log('receive_msf|-----=> ', data);\n        if (data.target === props.myInfos.id)\n            snn(messageNumber);\n    })\n    }, []);\n    console.log('msg Notifications', msgNotifications)\n    return (\n        <StylesProvider injectFirst>\n\n            <div className={classes.Troot}>\n                <Badge className={classes.bdg} badgeContent={messageNumber} aria-describedby={id} color=\"secondary\" onClick={handleClick}>\n                <MailIcon />\n                </Badge>\n                <Popover\n                    id={id}\n                    open={open}\n                    anchorEl={anchorEl}\n                    onClose={handleClose}\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'center',\n                    }}\n                    transformOrigin={{\n                        vertical: 'top',\n                        horizontal: 'center',\n                    }}\n                >\n                    {\n                        (msgNotifications.length === 0) ? <Typography>nulllllllllll</Typography>\n                            :\n                            msgNotifications.map((el) => {\n                                if (el.type == \"message\") {\n\n                                    return (\n                                        <List className={classes.root}>\n\n                                            <ListItem alignItems=\"flex-start\">\n                                                <ListItemAvatar>\n                                                    <Avatar alt={`${el.userName}image`} src={`http://localhost:3001/${el.image}`} />\n                                                </ListItemAvatar>\n                                                <ListItemText\n                                                    primary={el.userName}\n                                                    secondary={\n                                                        <React.Fragment>\n                                                            <Typography\n                                                                component=\"span\"\n                                                                variant=\"body2\"\n                                                                className={classes.inline}\n                                                                color=\"textPrimary\"\n                                                            >\n                                                                {' '}\n                                                            </Typography>\n                                                            {`New message from ${el.userName }`}\n                                                        </React.Fragment>\n                                                    }\n                                                />\n                                            </ListItem>\n                                            <Divider variant=\"inset\" component=\"li\" />\n\n                                        </List>\n                                    )\n                                }\n                            })\n                    }\n\n                </Popover>\n                {/* <Badge badgeContent={messageNumber} color=\"primary\">\n                        <MailIcon />\n            </Badge> */}\n                {/* <Badge badgeContent={notifNumber} color=\"primary\">\n                <NotificationsIcon />\n            </Badge> */}\n            </div>\n        </StylesProvider>\n    )\n};\n\n\n\n\n\nexport default MessageNotification;",{"ruleId":"227","replacedBy":"228"},{"ruleId":"229","replacedBy":"230"},{"ruleId":"231","severity":1,"message":"232","line":31,"column":8,"nodeType":"233","messageId":"234","endLine":31,"endColumn":13},{"ruleId":"235","severity":1,"message":"236","line":123,"column":6,"nodeType":"237","endLine":123,"endColumn":19,"suggestions":"238"},{"ruleId":"235","severity":1,"message":"239","line":152,"column":6,"nodeType":"237","endLine":152,"endColumn":10,"suggestions":"240"},{"ruleId":"231","severity":1,"message":"241","line":5,"column":10,"nodeType":"233","messageId":"234","endLine":5,"endColumn":16},{"ruleId":"242","severity":1,"message":"243","line":148,"column":33,"nodeType":"244","messageId":"245","endLine":148,"endColumn":35},{"ruleId":"242","severity":1,"message":"243","line":155,"column":37,"nodeType":"244","messageId":"245","endLine":155,"endColumn":39},{"ruleId":"231","severity":1,"message":"246","line":4,"column":16,"nodeType":"233","messageId":"234","endLine":4,"endColumn":20},{"ruleId":"231","severity":1,"message":"247","line":4,"column":22,"nodeType":"233","messageId":"234","endLine":4,"endColumn":25},{"ruleId":"231","severity":1,"message":"248","line":4,"column":27,"nodeType":"233","messageId":"234","endLine":4,"endColumn":33},{"ruleId":"231","severity":1,"message":"249","line":4,"column":35,"nodeType":"233","messageId":"234","endLine":4,"endColumn":40},{"ruleId":"231","severity":1,"message":"250","line":4,"column":42,"nodeType":"233","messageId":"234","endLine":4,"endColumn":46},{"ruleId":"231","severity":1,"message":"251","line":4,"column":48,"nodeType":"233","messageId":"234","endLine":4,"endColumn":56},{"ruleId":"231","severity":1,"message":"252","line":4,"column":58,"nodeType":"233","messageId":"234","endLine":4,"endColumn":81},{"ruleId":"231","severity":1,"message":"253","line":4,"column":83,"nodeType":"233","messageId":"234","endLine":4,"endColumn":95},{"ruleId":"231","severity":1,"message":"254","line":4,"column":97,"nodeType":"233","messageId":"234","endLine":4,"endColumn":111},{"ruleId":"231","severity":1,"message":"255","line":4,"column":113,"nodeType":"233","messageId":"234","endLine":4,"endColumn":121},{"ruleId":"231","severity":1,"message":"256","line":4,"column":123,"nodeType":"233","messageId":"234","endLine":4,"endColumn":129},{"ruleId":"231","severity":1,"message":"257","line":4,"column":138,"nodeType":"233","messageId":"234","endLine":4,"endColumn":144},{"ruleId":"231","severity":1,"message":"258","line":5,"column":10,"nodeType":"233","messageId":"234","endLine":5,"endColumn":20},{"ruleId":"231","severity":1,"message":"259","line":13,"column":7,"nodeType":"233","messageId":"234","endLine":13,"endColumn":18},{"ruleId":"231","severity":1,"message":"260","line":47,"column":20,"nodeType":"233","messageId":"234","endLine":47,"endColumn":22},{"ruleId":"242","severity":1,"message":"261","line":60,"column":17,"nodeType":"244","messageId":"245","endLine":60,"endColumn":19},{"ruleId":"235","severity":1,"message":"262","line":91,"column":6,"nodeType":"237","endLine":91,"endColumn":16,"suggestions":"263"},{"ruleId":"264","severity":1,"message":"265","line":107,"column":35,"nodeType":"266","endLine":107,"endColumn":48},{"ruleId":"267","severity":1,"message":"268","line":23,"column":1,"nodeType":"269","messageId":"270","endLine":23,"endColumn":194},{"ruleId":"267","severity":1,"message":"268","line":24,"column":1,"nodeType":"269","messageId":"270","endLine":24,"endColumn":56},{"ruleId":"267","severity":1,"message":"268","line":25,"column":1,"nodeType":"269","messageId":"270","endLine":25,"endColumn":212},{"ruleId":"242","severity":1,"message":"243","line":107,"column":31,"nodeType":"244","messageId":"245","endLine":107,"endColumn":33},{"ruleId":"231","severity":1,"message":"271","line":7,"column":8,"nodeType":"233","messageId":"234","endLine":7,"endColumn":16},{"ruleId":"231","severity":1,"message":"272","line":17,"column":22,"nodeType":"233","messageId":"234","endLine":17,"endColumn":32},{"ruleId":"242","severity":1,"message":"243","line":71,"column":48,"nodeType":"244","messageId":"245","endLine":71,"endColumn":50},{"ruleId":"273","severity":1,"message":"274","line":132,"column":44,"nodeType":"275","messageId":"276","endLine":132,"endColumn":46},{"ruleId":"242","severity":1,"message":"261","line":133,"column":36,"nodeType":"244","messageId":"245","endLine":133,"endColumn":38},{"ruleId":"242","severity":1,"message":"243","line":145,"column":45,"nodeType":"244","messageId":"245","endLine":145,"endColumn":47},{"ruleId":"242","severity":1,"message":"243","line":147,"column":45,"nodeType":"244","messageId":"245","endLine":147,"endColumn":47},{"ruleId":"242","severity":1,"message":"243","line":149,"column":45,"nodeType":"244","messageId":"245","endLine":149,"endColumn":47},{"ruleId":"242","severity":1,"message":"243","line":151,"column":45,"nodeType":"244","messageId":"245","endLine":151,"endColumn":47},{"ruleId":"231","severity":1,"message":"277","line":57,"column":9,"nodeType":"233","messageId":"234","endLine":57,"endColumn":15},{"ruleId":"242","severity":1,"message":"261","line":79,"column":50,"nodeType":"244","messageId":"245","endLine":79,"endColumn":52},{"ruleId":"235","severity":1,"message":"278","line":92,"column":8,"nodeType":"237","endLine":92,"endColumn":24,"suggestions":"279"},{"ruleId":"235","severity":1,"message":"236","line":123,"column":8,"nodeType":"237","endLine":123,"endColumn":10,"suggestions":"280"},{"ruleId":"242","severity":1,"message":"261","line":141,"column":45,"nodeType":"244","messageId":"245","endLine":141,"endColumn":47},{"ruleId":"242","severity":1,"message":"243","line":145,"column":53,"nodeType":"244","messageId":"245","endLine":145,"endColumn":55},{"ruleId":"231","severity":1,"message":"281","line":4,"column":10,"nodeType":"233","messageId":"234","endLine":4,"endColumn":24},{"ruleId":"231","severity":1,"message":"282","line":7,"column":10,"nodeType":"233","messageId":"234","endLine":7,"endColumn":14},{"ruleId":"231","severity":1,"message":"249","line":7,"column":35,"nodeType":"233","messageId":"234","endLine":7,"endColumn":40},{"ruleId":"231","severity":1,"message":"252","line":7,"column":58,"nodeType":"233","messageId":"234","endLine":7,"endColumn":81},{"ruleId":"231","severity":1,"message":"255","line":7,"column":113,"nodeType":"233","messageId":"234","endLine":7,"endColumn":121},{"ruleId":"231","severity":1,"message":"257","line":7,"column":138,"nodeType":"233","messageId":"234","endLine":7,"endColumn":144},{"ruleId":"231","severity":1,"message":"283","line":8,"column":25,"nodeType":"233","messageId":"234","endLine":8,"endColumn":49},{"ruleId":"231","severity":1,"message":"284","line":10,"column":8,"nodeType":"233","messageId":"234","endLine":10,"endColumn":20},{"ruleId":"273","severity":1,"message":"285","line":120,"column":34,"nodeType":"275","messageId":"286","endLine":120,"endColumn":36},{"ruleId":"235","severity":1,"message":"287","line":137,"column":6,"nodeType":"237","endLine":137,"endColumn":19,"suggestions":"288"},{"ruleId":"273","severity":1,"message":"285","line":246,"column":56,"nodeType":"275","messageId":"286","endLine":246,"endColumn":58},{"ruleId":"231","severity":1,"message":"272","line":17,"column":22,"nodeType":"233","messageId":"234","endLine":17,"endColumn":32},{"ruleId":"242","severity":1,"message":"243","line":70,"column":48,"nodeType":"244","messageId":"245","endLine":70,"endColumn":50},{"ruleId":"273","severity":1,"message":"274","line":121,"column":55,"nodeType":"275","messageId":"276","endLine":121,"endColumn":57},{"ruleId":"242","severity":1,"message":"243","line":122,"column":45,"nodeType":"244","messageId":"245","endLine":122,"endColumn":47},{"ruleId":"231","severity":1,"message":"289","line":8,"column":8,"nodeType":"233","messageId":"234","endLine":8,"endColumn":25},{"ruleId":"231","severity":1,"message":"272","line":17,"column":22,"nodeType":"233","messageId":"234","endLine":17,"endColumn":32},{"ruleId":"242","severity":1,"message":"243","line":71,"column":48,"nodeType":"244","messageId":"245","endLine":71,"endColumn":50},{"ruleId":"235","severity":1,"message":"290","line":95,"column":8,"nodeType":"237","endLine":95,"endColumn":10,"suggestions":"291"},{"ruleId":"273","severity":1,"message":"274","line":121,"column":55,"nodeType":"275","messageId":"276","endLine":121,"endColumn":57},{"ruleId":"242","severity":1,"message":"243","line":122,"column":45,"nodeType":"244","messageId":"245","endLine":122,"endColumn":47},"no-native-reassign",["292"],"no-negated-in-lhs",["293"],"no-unused-vars","'Badge' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.","ArrayExpression",["294"],"React Hook React.useEffect has a missing dependency: 'saveMyInfos'. Either include it or remove the dependency array.",["295"],"'Button' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Tabs' is defined but never used.","'Tab' is defined but never used.","'AppBar' is defined but never used.","'Paper' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemSecondaryAction' is defined but never used.","'ListItemText' is defined but never used.","'ListItemAvatar' is defined but never used.","'Checkbox' is defined but never used.","'Avatar' is defined but never used.","'Hidden' is defined but never used.","'makeStyles' is defined but never used.","'StyledBadge' is assigned a value but never used.","'xx' is assigned a value but never used.","Expected '!==' and instead saw '!='.","React Hook React.useEffect has missing dependencies: 'props.id' and 'saveMyInfos'. Either include them or remove the dependency array.",["296"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'MailIcon' is defined but never used.","'withStyles' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'socket' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'props.id'. Either include it or remove the dependency array.",["297"],["298"],"'StylesProvider' is defined but never used.","'Grid' is defined but never used.","'IoIosRemoveCircleOutline' is defined but never used.","'AlertDialoge' is defined but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","React Hook React.useEffect has missing dependencies: 'Items' and 'effect'. Either include them or remove the dependency array. You can also do a functional update 'triggerEffect(e => ...)' if you only need 'effect' in the 'triggerEffect' call.",["299"],"'NotificationsIcon' is defined but never used.","React Hook React.useEffect has missing dependencies: 'messageNumber', 'props.myInfos.id', and 'socket'. Either include them or remove the dependency array.",["300"],"no-global-assign","no-unsafe-negation",{"desc":"301","fix":"302"},{"desc":"303","fix":"304"},{"desc":"305","fix":"306"},{"desc":"307","fix":"308"},{"desc":"309","fix":"310"},{"desc":"311","fix":"312"},{"desc":"313","fix":"314"},"Update the dependencies array to be: [userInf, id, socket]",{"range":"315","text":"316"},"Update the dependencies array to be: [id, saveMyInfos]",{"range":"317","text":"318"},"Update the dependencies array to be: [props.id, saveMyInfos, stopLoop]",{"range":"319","text":"320"},"Update the dependencies array to be: [props.hisInfos, props.id]",{"range":"321","text":"322"},"Update the dependencies array to be: [socket]",{"range":"323","text":"324"},"Update the dependencies array to be: [Items, effect, printImages]",{"range":"325","text":"326"},"Update the dependencies array to be: [messageNumber, props.myInfos.id, socket]",{"range":"327","text":"328"},[4192,4205],"[userInf, id, socket]",[4804,4808],"[id, saveMyInfos]",[2416,2426],"[props.id, saveMyInfos, stopLoop]",[2510,2526],"[props.hisInfos, props.id]",[3631,3633],"[socket]",[3255,3268],"[Items, effect, printImages]",[2868,2870],"[messageNumber, props.myInfos.id, socket]"]